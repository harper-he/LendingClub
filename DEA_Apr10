{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Using Pyspark to read the dataset and check missing values."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "# import packages\n",
    "from pyspark.sql import SparkSession\n",
    "from pyspark.ml import feature\n",
    "from pyspark.ml import classification\n",
    "from pyspark.sql import functions as fn\n",
    "from pyspark.sql.functions import isnan, when, count, col\n",
    "from pyspark.ml import Pipeline\n",
    "from pyspark.ml.evaluation import BinaryClassificationEvaluator, \\\n",
    "    MulticlassClassificationEvaluator, \\\n",
    "    RegressionEvaluator\n",
    "from pyspark.ml.tuning import CrossValidator, ParamGridBuilder\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import pandas as pd\n",
    "from pyspark.sql import SparkSession\n",
    "from pyspark.sql.types import *\n",
    "from pyspark.sql.functions import isnan, when, count, col\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import numpy as np \n",
    "\n",
    "\n",
    "spark = SparkSession.builder.getOrCreate()\n",
    "sc = spark.sparkContext"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# expand the output display to see more columns of a pandas DataFrame\n",
    "pd.set_option('display.max_columns', None)  \n",
    "pd.set_option('display.expand_frame_repr', False)\n",
    "pd.set_option('max_colwidth', -1)\n",
    "# check the shape of df - use this idiots\n",
    "def size_shape(df):\n",
    "    \n",
    "    print(\"rows:\",df.count())\n",
    "    print(\"columns:\",len(df.columns))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "# read the dataset\n",
    "# C:\\\\Users\\\\tigerman381\\\\Downloads\\\\lending-club-loan-data\\\\\n",
    "df = spark.read.csv('loan.csv', header=True, inferSchema=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "# df.show(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>member_id</th>\n",
       "      <th>loan_amnt</th>\n",
       "      <th>funded_amnt</th>\n",
       "      <th>funded_amnt_inv</th>\n",
       "      <th>term</th>\n",
       "      <th>int_rate</th>\n",
       "      <th>installment</th>\n",
       "      <th>grade</th>\n",
       "      <th>sub_grade</th>\n",
       "      <th>emp_title</th>\n",
       "      <th>emp_length</th>\n",
       "      <th>home_ownership</th>\n",
       "      <th>annual_inc</th>\n",
       "      <th>verification_status</th>\n",
       "      <th>issue_d</th>\n",
       "      <th>loan_status</th>\n",
       "      <th>pymnt_plan</th>\n",
       "      <th>url</th>\n",
       "      <th>desc</th>\n",
       "      <th>purpose</th>\n",
       "      <th>title</th>\n",
       "      <th>zip_code</th>\n",
       "      <th>addr_state</th>\n",
       "      <th>dti</th>\n",
       "      <th>delinq_2yrs</th>\n",
       "      <th>earliest_cr_line</th>\n",
       "      <th>inq_last_6mths</th>\n",
       "      <th>mths_since_last_delinq</th>\n",
       "      <th>mths_since_last_record</th>\n",
       "      <th>open_acc</th>\n",
       "      <th>pub_rec</th>\n",
       "      <th>revol_bal</th>\n",
       "      <th>revol_util</th>\n",
       "      <th>total_acc</th>\n",
       "      <th>initial_list_status</th>\n",
       "      <th>out_prncp</th>\n",
       "      <th>out_prncp_inv</th>\n",
       "      <th>total_pymnt</th>\n",
       "      <th>total_pymnt_inv</th>\n",
       "      <th>total_rec_prncp</th>\n",
       "      <th>total_rec_int</th>\n",
       "      <th>total_rec_late_fee</th>\n",
       "      <th>recoveries</th>\n",
       "      <th>collection_recovery_fee</th>\n",
       "      <th>last_pymnt_d</th>\n",
       "      <th>last_pymnt_amnt</th>\n",
       "      <th>next_pymnt_d</th>\n",
       "      <th>last_credit_pull_d</th>\n",
       "      <th>collections_12_mths_ex_med</th>\n",
       "      <th>mths_since_last_major_derog</th>\n",
       "      <th>policy_code</th>\n",
       "      <th>application_type</th>\n",
       "      <th>annual_inc_joint</th>\n",
       "      <th>dti_joint</th>\n",
       "      <th>verification_status_joint</th>\n",
       "      <th>acc_now_delinq</th>\n",
       "      <th>tot_coll_amt</th>\n",
       "      <th>tot_cur_bal</th>\n",
       "      <th>open_acc_6m</th>\n",
       "      <th>open_act_il</th>\n",
       "      <th>open_il_12m</th>\n",
       "      <th>open_il_24m</th>\n",
       "      <th>mths_since_rcnt_il</th>\n",
       "      <th>total_bal_il</th>\n",
       "      <th>il_util</th>\n",
       "      <th>open_rv_12m</th>\n",
       "      <th>open_rv_24m</th>\n",
       "      <th>max_bal_bc</th>\n",
       "      <th>all_util</th>\n",
       "      <th>total_rev_hi_lim</th>\n",
       "      <th>inq_fi</th>\n",
       "      <th>total_cu_tl</th>\n",
       "      <th>inq_last_12m</th>\n",
       "      <th>acc_open_past_24mths</th>\n",
       "      <th>avg_cur_bal</th>\n",
       "      <th>bc_open_to_buy</th>\n",
       "      <th>bc_util</th>\n",
       "      <th>chargeoff_within_12_mths</th>\n",
       "      <th>delinq_amnt</th>\n",
       "      <th>mo_sin_old_il_acct</th>\n",
       "      <th>mo_sin_old_rev_tl_op</th>\n",
       "      <th>mo_sin_rcnt_rev_tl_op</th>\n",
       "      <th>mo_sin_rcnt_tl</th>\n",
       "      <th>mort_acc</th>\n",
       "      <th>mths_since_recent_bc</th>\n",
       "      <th>mths_since_recent_bc_dlq</th>\n",
       "      <th>mths_since_recent_inq</th>\n",
       "      <th>mths_since_recent_revol_delinq</th>\n",
       "      <th>num_accts_ever_120_pd</th>\n",
       "      <th>num_actv_bc_tl</th>\n",
       "      <th>num_actv_rev_tl</th>\n",
       "      <th>num_bc_sats</th>\n",
       "      <th>num_bc_tl</th>\n",
       "      <th>num_il_tl</th>\n",
       "      <th>num_op_rev_tl</th>\n",
       "      <th>num_rev_accts</th>\n",
       "      <th>num_rev_tl_bal_gt_0</th>\n",
       "      <th>num_sats</th>\n",
       "      <th>num_tl_120dpd_2m</th>\n",
       "      <th>num_tl_30dpd</th>\n",
       "      <th>num_tl_90g_dpd_24m</th>\n",
       "      <th>num_tl_op_past_12m</th>\n",
       "      <th>pct_tl_nvr_dlq</th>\n",
       "      <th>percent_bc_gt_75</th>\n",
       "      <th>pub_rec_bankruptcies</th>\n",
       "      <th>tax_liens</th>\n",
       "      <th>tot_hi_cred_lim</th>\n",
       "      <th>total_bal_ex_mort</th>\n",
       "      <th>total_bc_limit</th>\n",
       "      <th>total_il_high_credit_limit</th>\n",
       "      <th>revol_bal_joint</th>\n",
       "      <th>sec_app_earliest_cr_line</th>\n",
       "      <th>sec_app_inq_last_6mths</th>\n",
       "      <th>sec_app_mort_acc</th>\n",
       "      <th>sec_app_open_acc</th>\n",
       "      <th>sec_app_revol_util</th>\n",
       "      <th>sec_app_open_act_il</th>\n",
       "      <th>sec_app_num_rev_accts</th>\n",
       "      <th>sec_app_chargeoff_within_12_mths</th>\n",
       "      <th>sec_app_collections_12_mths_ex_med</th>\n",
       "      <th>sec_app_mths_since_last_major_derog</th>\n",
       "      <th>hardship_flag</th>\n",
       "      <th>hardship_type</th>\n",
       "      <th>hardship_reason</th>\n",
       "      <th>hardship_status</th>\n",
       "      <th>deferral_term</th>\n",
       "      <th>hardship_amount</th>\n",
       "      <th>hardship_start_date</th>\n",
       "      <th>hardship_end_date</th>\n",
       "      <th>payment_plan_start_date</th>\n",
       "      <th>hardship_length</th>\n",
       "      <th>hardship_dpd</th>\n",
       "      <th>hardship_loan_status</th>\n",
       "      <th>orig_projected_additional_accrued_interest</th>\n",
       "      <th>hardship_payoff_balance_amount</th>\n",
       "      <th>hardship_last_payment_amount</th>\n",
       "      <th>disbursement_method</th>\n",
       "      <th>debt_settlement_flag</th>\n",
       "      <th>debt_settlement_flag_date</th>\n",
       "      <th>settlement_status</th>\n",
       "      <th>settlement_date</th>\n",
       "      <th>settlement_amount</th>\n",
       "      <th>settlement_percentage</th>\n",
       "      <th>settlement_term</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>2500</td>\n",
       "      <td>2500</td>\n",
       "      <td>2500.0</td>\n",
       "      <td>36 months</td>\n",
       "      <td>13.56</td>\n",
       "      <td>84.92</td>\n",
       "      <td>C</td>\n",
       "      <td>C1</td>\n",
       "      <td>Chef</td>\n",
       "      <td>10+ years</td>\n",
       "      <td>RENT</td>\n",
       "      <td>55000</td>\n",
       "      <td>Not Verified</td>\n",
       "      <td>Dec-2018</td>\n",
       "      <td>Current</td>\n",
       "      <td>n</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>debt_consolidation</td>\n",
       "      <td>Debt consolidation</td>\n",
       "      <td>109xx</td>\n",
       "      <td>NY</td>\n",
       "      <td>18.24</td>\n",
       "      <td>0</td>\n",
       "      <td>Apr-2001</td>\n",
       "      <td>1</td>\n",
       "      <td>None</td>\n",
       "      <td>45</td>\n",
       "      <td>9</td>\n",
       "      <td>1</td>\n",
       "      <td>4341</td>\n",
       "      <td>10.3</td>\n",
       "      <td>34</td>\n",
       "      <td>w</td>\n",
       "      <td>2386.02</td>\n",
       "      <td>2386.02</td>\n",
       "      <td>167.02</td>\n",
       "      <td>167.02</td>\n",
       "      <td>113.98</td>\n",
       "      <td>53.04</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Feb-2019</td>\n",
       "      <td>84.92</td>\n",
       "      <td>Mar-2019</td>\n",
       "      <td>Feb-2019</td>\n",
       "      <td>0</td>\n",
       "      <td>None</td>\n",
       "      <td>1</td>\n",
       "      <td>Individual</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>16901</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>12560</td>\n",
       "      <td>69</td>\n",
       "      <td>2</td>\n",
       "      <td>7</td>\n",
       "      <td>2137</td>\n",
       "      <td>28</td>\n",
       "      <td>42000</td>\n",
       "      <td>1</td>\n",
       "      <td>11</td>\n",
       "      <td>2</td>\n",
       "      <td>9</td>\n",
       "      <td>1878</td>\n",
       "      <td>34360.0</td>\n",
       "      <td>5.9</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>140.0</td>\n",
       "      <td>212</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>16</td>\n",
       "      <td>7</td>\n",
       "      <td>18</td>\n",
       "      <td>5</td>\n",
       "      <td>9</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>100.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>60124</td>\n",
       "      <td>16901</td>\n",
       "      <td>36500</td>\n",
       "      <td>18124</td>\n",
       "      <td>NaN</td>\n",
       "      <td>None</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>N</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>Cash</td>\n",
       "      <td>N</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>30000</td>\n",
       "      <td>30000</td>\n",
       "      <td>30000.0</td>\n",
       "      <td>60 months</td>\n",
       "      <td>18.94</td>\n",
       "      <td>777.23</td>\n",
       "      <td>D</td>\n",
       "      <td>D2</td>\n",
       "      <td>Postmaster</td>\n",
       "      <td>10+ years</td>\n",
       "      <td>MORTGAGE</td>\n",
       "      <td>90000</td>\n",
       "      <td>Source Verified</td>\n",
       "      <td>Dec-2018</td>\n",
       "      <td>Current</td>\n",
       "      <td>n</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>debt_consolidation</td>\n",
       "      <td>Debt consolidation</td>\n",
       "      <td>713xx</td>\n",
       "      <td>LA</td>\n",
       "      <td>26.52</td>\n",
       "      <td>0</td>\n",
       "      <td>Jun-1987</td>\n",
       "      <td>0</td>\n",
       "      <td>71</td>\n",
       "      <td>75</td>\n",
       "      <td>13</td>\n",
       "      <td>1</td>\n",
       "      <td>12315</td>\n",
       "      <td>24.2</td>\n",
       "      <td>44</td>\n",
       "      <td>w</td>\n",
       "      <td>29387.75</td>\n",
       "      <td>29387.75</td>\n",
       "      <td>1507.11</td>\n",
       "      <td>1507.11</td>\n",
       "      <td>612.25</td>\n",
       "      <td>894.86</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Feb-2019</td>\n",
       "      <td>777.23</td>\n",
       "      <td>Mar-2019</td>\n",
       "      <td>Feb-2019</td>\n",
       "      <td>0</td>\n",
       "      <td>None</td>\n",
       "      <td>1</td>\n",
       "      <td>Individual</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>0</td>\n",
       "      <td>1208</td>\n",
       "      <td>321915</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>87153</td>\n",
       "      <td>88</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>998</td>\n",
       "      <td>57</td>\n",
       "      <td>50800</td>\n",
       "      <td>2</td>\n",
       "      <td>15</td>\n",
       "      <td>2</td>\n",
       "      <td>10</td>\n",
       "      <td>24763</td>\n",
       "      <td>13761.0</td>\n",
       "      <td>8.3</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>163.0</td>\n",
       "      <td>378</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>4.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>9</td>\n",
       "      <td>27</td>\n",
       "      <td>8</td>\n",
       "      <td>14</td>\n",
       "      <td>4</td>\n",
       "      <td>13</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>95.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>372872</td>\n",
       "      <td>99468</td>\n",
       "      <td>15000</td>\n",
       "      <td>94072</td>\n",
       "      <td>NaN</td>\n",
       "      <td>None</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>N</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>Cash</td>\n",
       "      <td>N</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>5000</td>\n",
       "      <td>5000</td>\n",
       "      <td>5000.0</td>\n",
       "      <td>36 months</td>\n",
       "      <td>17.97</td>\n",
       "      <td>180.69</td>\n",
       "      <td>D</td>\n",
       "      <td>D1</td>\n",
       "      <td>Administrative</td>\n",
       "      <td>6 years</td>\n",
       "      <td>MORTGAGE</td>\n",
       "      <td>59280</td>\n",
       "      <td>Source Verified</td>\n",
       "      <td>Dec-2018</td>\n",
       "      <td>Current</td>\n",
       "      <td>n</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>debt_consolidation</td>\n",
       "      <td>Debt consolidation</td>\n",
       "      <td>490xx</td>\n",
       "      <td>MI</td>\n",
       "      <td>10.51</td>\n",
       "      <td>0</td>\n",
       "      <td>Apr-2011</td>\n",
       "      <td>0</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>8</td>\n",
       "      <td>0</td>\n",
       "      <td>4599</td>\n",
       "      <td>19.1</td>\n",
       "      <td>13</td>\n",
       "      <td>w</td>\n",
       "      <td>4787.21</td>\n",
       "      <td>4787.21</td>\n",
       "      <td>353.89</td>\n",
       "      <td>353.89</td>\n",
       "      <td>212.79</td>\n",
       "      <td>141.10</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Feb-2019</td>\n",
       "      <td>180.69</td>\n",
       "      <td>Mar-2019</td>\n",
       "      <td>Feb-2019</td>\n",
       "      <td>0</td>\n",
       "      <td>None</td>\n",
       "      <td>1</td>\n",
       "      <td>Individual</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>110299</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>14</td>\n",
       "      <td>7150</td>\n",
       "      <td>72</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>35</td>\n",
       "      <td>24100</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>18383</td>\n",
       "      <td>13800.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>87.0</td>\n",
       "      <td>92</td>\n",
       "      <td>15</td>\n",
       "      <td>14</td>\n",
       "      <td>2</td>\n",
       "      <td>77.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>14</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>6</td>\n",
       "      <td>7</td>\n",
       "      <td>3</td>\n",
       "      <td>8</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>136927</td>\n",
       "      <td>11749</td>\n",
       "      <td>13800</td>\n",
       "      <td>10000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>None</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>N</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>Cash</td>\n",
       "      <td>N</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>4000</td>\n",
       "      <td>4000</td>\n",
       "      <td>4000.0</td>\n",
       "      <td>36 months</td>\n",
       "      <td>18.94</td>\n",
       "      <td>146.51</td>\n",
       "      <td>D</td>\n",
       "      <td>D2</td>\n",
       "      <td>IT Supervisor</td>\n",
       "      <td>10+ years</td>\n",
       "      <td>MORTGAGE</td>\n",
       "      <td>92000</td>\n",
       "      <td>Source Verified</td>\n",
       "      <td>Dec-2018</td>\n",
       "      <td>Current</td>\n",
       "      <td>n</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>debt_consolidation</td>\n",
       "      <td>Debt consolidation</td>\n",
       "      <td>985xx</td>\n",
       "      <td>WA</td>\n",
       "      <td>16.74</td>\n",
       "      <td>0</td>\n",
       "      <td>Feb-2006</td>\n",
       "      <td>0</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>10</td>\n",
       "      <td>0</td>\n",
       "      <td>5468</td>\n",
       "      <td>78.1</td>\n",
       "      <td>13</td>\n",
       "      <td>w</td>\n",
       "      <td>3831.93</td>\n",
       "      <td>3831.93</td>\n",
       "      <td>286.71</td>\n",
       "      <td>286.71</td>\n",
       "      <td>168.07</td>\n",
       "      <td>118.64</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Feb-2019</td>\n",
       "      <td>146.51</td>\n",
       "      <td>Mar-2019</td>\n",
       "      <td>Feb-2019</td>\n",
       "      <td>0</td>\n",
       "      <td>None</td>\n",
       "      <td>1</td>\n",
       "      <td>Individual</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>0</td>\n",
       "      <td>686</td>\n",
       "      <td>305049</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>30683</td>\n",
       "      <td>68</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3761</td>\n",
       "      <td>70</td>\n",
       "      <td>7000</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>30505</td>\n",
       "      <td>1239.0</td>\n",
       "      <td>75.2</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>62.0</td>\n",
       "      <td>154</td>\n",
       "      <td>64</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>64.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>5</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>7</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>10</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>385183</td>\n",
       "      <td>36151</td>\n",
       "      <td>5000</td>\n",
       "      <td>44984</td>\n",
       "      <td>NaN</td>\n",
       "      <td>None</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>N</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>Cash</td>\n",
       "      <td>N</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>30000</td>\n",
       "      <td>30000</td>\n",
       "      <td>30000.0</td>\n",
       "      <td>60 months</td>\n",
       "      <td>16.14</td>\n",
       "      <td>731.78</td>\n",
       "      <td>C</td>\n",
       "      <td>C4</td>\n",
       "      <td>Mechanic</td>\n",
       "      <td>10+ years</td>\n",
       "      <td>MORTGAGE</td>\n",
       "      <td>57250</td>\n",
       "      <td>Not Verified</td>\n",
       "      <td>Dec-2018</td>\n",
       "      <td>Current</td>\n",
       "      <td>n</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>debt_consolidation</td>\n",
       "      <td>Debt consolidation</td>\n",
       "      <td>212xx</td>\n",
       "      <td>MD</td>\n",
       "      <td>26.35</td>\n",
       "      <td>0</td>\n",
       "      <td>Dec-2000</td>\n",
       "      <td>0</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>12</td>\n",
       "      <td>0</td>\n",
       "      <td>829</td>\n",
       "      <td>3.6</td>\n",
       "      <td>26</td>\n",
       "      <td>w</td>\n",
       "      <td>29339.02</td>\n",
       "      <td>29339.02</td>\n",
       "      <td>1423.21</td>\n",
       "      <td>1423.21</td>\n",
       "      <td>660.98</td>\n",
       "      <td>762.23</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Feb-2019</td>\n",
       "      <td>731.78</td>\n",
       "      <td>Mar-2019</td>\n",
       "      <td>Feb-2019</td>\n",
       "      <td>0</td>\n",
       "      <td>None</td>\n",
       "      <td>1</td>\n",
       "      <td>Individual</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>116007</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>28845</td>\n",
       "      <td>89</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>516</td>\n",
       "      <td>54</td>\n",
       "      <td>23100</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>9</td>\n",
       "      <td>9667</td>\n",
       "      <td>8471.0</td>\n",
       "      <td>8.9</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>53.0</td>\n",
       "      <td>216</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>13</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>8</td>\n",
       "      <td>9</td>\n",
       "      <td>6</td>\n",
       "      <td>15</td>\n",
       "      <td>2</td>\n",
       "      <td>12</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>92.3</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>157548</td>\n",
       "      <td>29674</td>\n",
       "      <td>9300</td>\n",
       "      <td>32332</td>\n",
       "      <td>NaN</td>\n",
       "      <td>None</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>N</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>Cash</td>\n",
       "      <td>N</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     id member_id  loan_amnt  funded_amnt  funded_amnt_inv        term  int_rate  installment grade sub_grade       emp_title emp_length home_ownership annual_inc verification_status   issue_d loan_status pymnt_plan   url  desc             purpose               title zip_code addr_state    dti delinq_2yrs earliest_cr_line inq_last_6mths mths_since_last_delinq mths_since_last_record open_acc pub_rec revol_bal revol_util total_acc initial_list_status out_prncp out_prncp_inv total_pymnt total_pymnt_inv total_rec_prncp total_rec_int total_rec_late_fee recoveries collection_recovery_fee last_pymnt_d last_pymnt_amnt next_pymnt_d last_credit_pull_d collections_12_mths_ex_med mths_since_last_major_derog policy_code application_type annual_inc_joint dti_joint verification_status_joint acc_now_delinq tot_coll_amt tot_cur_bal open_acc_6m open_act_il open_il_12m open_il_24m mths_since_rcnt_il total_bal_il il_util open_rv_12m open_rv_24m max_bal_bc all_util total_rev_hi_lim inq_fi total_cu_tl inq_last_12m  acc_open_past_24mths avg_cur_bal  bc_open_to_buy bc_util  chargeoff_within_12_mths  delinq_amnt  mo_sin_old_il_acct  mo_sin_old_rev_tl_op  mo_sin_rcnt_rev_tl_op  mo_sin_rcnt_tl  mort_acc  mths_since_recent_bc  mths_since_recent_bc_dlq  mths_since_recent_inq  mths_since_recent_revol_delinq  num_accts_ever_120_pd  num_actv_bc_tl  num_actv_rev_tl  num_bc_sats  num_bc_tl  num_il_tl  num_op_rev_tl  num_rev_accts  num_rev_tl_bal_gt_0  num_sats  num_tl_120dpd_2m  num_tl_30dpd  num_tl_90g_dpd_24m  num_tl_op_past_12m  pct_tl_nvr_dlq  percent_bc_gt_75  pub_rec_bankruptcies  tax_liens  tot_hi_cred_lim  total_bal_ex_mort  total_bc_limit  total_il_high_credit_limit  revol_bal_joint sec_app_earliest_cr_line  sec_app_inq_last_6mths  sec_app_mort_acc  sec_app_open_acc  sec_app_revol_util  sec_app_open_act_il  sec_app_num_rev_accts  sec_app_chargeoff_within_12_mths  sec_app_collections_12_mths_ex_med  sec_app_mths_since_last_major_derog hardship_flag hardship_type hardship_reason hardship_status deferral_term hardship_amount hardship_start_date hardship_end_date payment_plan_start_date hardship_length hardship_dpd hardship_loan_status orig_projected_additional_accrued_interest hardship_payoff_balance_amount hardship_last_payment_amount disbursement_method debt_settlement_flag debt_settlement_flag_date settlement_status settlement_date settlement_amount settlement_percentage settlement_term\n",
       "0  None  None      2500       2500         2500.0            36 months  13.56     84.92        C     C1        Chef            10+ years  RENT           55000      Not Verified        Dec-2018  Current     n          None  None  debt_consolidation  Debt consolidation  109xx    NY         18.24  0           Apr-2001         1              None                   45                     9        1       4341      10.3       34        w                   2386.02   2386.02       167.02      167.02          113.98          53.04         0.0                0.0        0.0                     Feb-2019     84.92           Mar-2019     Feb-2019           0                          None                        1           Individual       None             None      None                      0              0            16901       2           2           1           2           2                  12560        69      2           7           2137       28       42000            1      11          2            9                     1878        34360.0         5.9     0.0                       0            140.0               212                   1                      1               0         1.0                  NaN                        2                     NaN                              0                      2               5                3            3          16         7              18             5                    9         0                 0             0                   3                   100.0           0.0               1                     0          60124            16901              36500           18124                      NaN               None                    NaN                     NaN               NaN               NaN                 NaN                  NaN                    NaN                               NaN                                 NaN                                   N             None          None            None            None          None            None                None              None                    None            None         None                 None                                       None                           None                         Cash                N                    None                      None              None            None              None                  None          \n",
       "1  None  None      30000      30000        30000.0           60 months  18.94     777.23       D     D2        Postmaster      10+ years  MORTGAGE       90000      Source Verified     Dec-2018  Current     n          None  None  debt_consolidation  Debt consolidation  713xx    LA         26.52  0           Jun-1987         0              71                     75                     13       1       12315     24.2       44        w                   29387.75  29387.75      1507.11     1507.11         612.25          894.86        0.0                0.0        0.0                     Feb-2019     777.23          Mar-2019     Feb-2019           0                          None                        1           Individual       None             None      None                      0              1208         321915      4           4           2           3           3                  87153        88      4           5           998        57       50800            2      15          2            10                    24763       13761.0         8.3     0.0                       0            163.0               378                   4                      3               3         4.0                  NaN                        4                     NaN                              0                      2               4                4            9          27         8              14             4                    13        0                 0             0                   6                   95.0            0.0               1                     0          372872           99468              15000           94072                      NaN               None                    NaN                     NaN               NaN               NaN                 NaN                  NaN                    NaN                               NaN                                 NaN                                   N             None          None            None            None          None            None                None              None                    None            None         None                 None                                       None                           None                         Cash                N                    None                      None              None            None              None                  None          \n",
       "2  None  None      5000       5000         5000.0            36 months  17.97     180.69       D     D1        Administrative  6 years    MORTGAGE       59280      Source Verified     Dec-2018  Current     n          None  None  debt_consolidation  Debt consolidation  490xx    MI         10.51  0           Apr-2011         0              None                   None                   8        0       4599      19.1       13        w                   4787.21   4787.21       353.89      353.89          212.79          141.10        0.0                0.0        0.0                     Feb-2019     180.69          Mar-2019     Feb-2019           0                          None                        1           Individual       None             None      None                      0              0            110299      0           1           0           2           14                 7150         72      0           2           0          35       24100            1      5           0            4                     18383       13800.0         0       0.0                       0            87.0                92                    15                     14              2         77.0                 NaN                        14                    NaN                              0                      0               3                3            3          4          6              7              3                    8         0                 0             0                   0                   100.0           0.0               0                     0          136927           11749              13800           10000                      NaN               None                    NaN                     NaN               NaN               NaN                 NaN                  NaN                    NaN                               NaN                                 NaN                                   N             None          None            None            None          None            None                None              None                    None            None         None                 None                                       None                           None                         Cash                N                    None                      None              None            None              None                  None          \n",
       "3  None  None      4000       4000         4000.0            36 months  18.94     146.51       D     D2        IT Supervisor   10+ years  MORTGAGE       92000      Source Verified     Dec-2018  Current     n          None  None  debt_consolidation  Debt consolidation  985xx    WA         16.74  0           Feb-2006         0              None                   None                   10       0       5468      78.1       13        w                   3831.93   3831.93       286.71      286.71          168.07          118.64        0.0                0.0        0.0                     Feb-2019     146.51          Mar-2019     Feb-2019           0                          None                        1           Individual       None             None      None                      0              686          305049      1           5           3           5           5                  30683        68      0           0           3761       70       7000             2      4           3            5                     30505       1239.0          75.2    0.0                       0            62.0                154                   64                     5               3         64.0                 NaN                        5                     NaN                              0                      1               2                1            2          7          2              3              2                    10        0                 0             0                   3                   100.0           100.0             0                     0          385183           36151              5000            44984                      NaN               None                    NaN                     NaN               NaN               NaN                 NaN                  NaN                    NaN                               NaN                                 NaN                                   N             None          None            None            None          None            None                None              None                    None            None         None                 None                                       None                           None                         Cash                N                    None                      None              None            None              None                  None          \n",
       "4  None  None      30000      30000        30000.0           60 months  16.14     731.78       C     C4        Mechanic        10+ years  MORTGAGE       57250      Not Verified        Dec-2018  Current     n          None  None  debt_consolidation  Debt consolidation  212xx    MD         26.35  0           Dec-2000         0              None                   None                   12       0       829       3.6        26        w                   29339.02  29339.02      1423.21     1423.21         660.98          762.23        0.0                0.0        0.0                     Feb-2019     731.78          Mar-2019     Feb-2019           0                          None                        1           Individual       None             None      None                      0              0            116007      3           5           3           5           4                  28845        89      2           4           516        54       23100            1      0           0            9                     9667        8471.0          8.9     0.0                       0            53.0                216                   2                      2               2         2.0                  NaN                        13                    NaN                              0                      2               2                3            8          9          6              15             2                    12        0                 0             0                   5                   92.3            0.0               0                     0          157548           29674              9300            32332                      NaN               None                    NaN                     NaN               NaN               NaN                 NaN                  NaN                    NaN                               NaN                                 NaN                                   N             None          None            None            None          None            None                None              None                    None            None         None                 None                                       None                           None                         Cash                N                    None                      None              None            None              None                  None          "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# take a look at the first 10 rows\n",
    "df_pd = df.limit(10).toPandas()\n",
    "display(df_pd.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+--------------------+-------+\n",
      "|         loan_status|  count|\n",
      "+--------------------+-------+\n",
      "|          Fully Paid|1041952|\n",
      "|             Default|     31|\n",
      "|     In Grace Period|   8952|\n",
      "|Does not meet the...|   1988|\n",
      "|         Charged Off| 261654|\n",
      "|            Oct-2015|      1|\n",
      "|  Late (31-120 days)|  21897|\n",
      "|             Current| 919695|\n",
      "|Does not meet the...|    761|\n",
      "|   Late (16-30 days)|   3737|\n",
      "+--------------------+-------+\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# check how many records for each loan status\n",
    "df_bystatus=df.groupby(df.loan_status).count()\n",
    "df_bystatus.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+-----------+------+\n",
      "|loan_status| count|\n",
      "+-----------+------+\n",
      "|Charged Off|261654|\n",
      "|       Late| 25634|\n",
      "|    Current|919695|\n",
      "+-----------+------+\n",
      "\n",
      "None\n",
      "rows: 1206983\n",
      "columns: 145\n"
     ]
    }
   ],
   "source": [
    "# check the number of Nan or Null for each column\n",
    "#As per our objective, Filtering only the columns required\n",
    "current_df = df.filter(col('loan_status').isin(['Late (31-120 days)','Charged Off','Late (16-30 days)','Current']))\n",
    "#Renaming the Late values into a single late\n",
    "current_df = current_df.withColumn(\"loan_status\", \\\n",
    "              when(current_df[\"loan_status\"].isin(['Late (31-120 days)','Late (16-30 days)']),'Late').otherwise(current_df[\"loan_status\"]))\n",
    "#Our dataset with only the desired columns values (Late,charged off,current)\n",
    "print(current_df.groupby(current_df.loan_status).count().show())\n",
    "size_shape(current_df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>member_id</th>\n",
       "      <th>loan_amnt</th>\n",
       "      <th>funded_amnt</th>\n",
       "      <th>funded_amnt_inv</th>\n",
       "      <th>term</th>\n",
       "      <th>int_rate</th>\n",
       "      <th>installment</th>\n",
       "      <th>grade</th>\n",
       "      <th>sub_grade</th>\n",
       "      <th>emp_title</th>\n",
       "      <th>emp_length</th>\n",
       "      <th>home_ownership</th>\n",
       "      <th>annual_inc</th>\n",
       "      <th>verification_status</th>\n",
       "      <th>issue_d</th>\n",
       "      <th>loan_status</th>\n",
       "      <th>pymnt_plan</th>\n",
       "      <th>url</th>\n",
       "      <th>desc</th>\n",
       "      <th>purpose</th>\n",
       "      <th>title</th>\n",
       "      <th>zip_code</th>\n",
       "      <th>addr_state</th>\n",
       "      <th>dti</th>\n",
       "      <th>delinq_2yrs</th>\n",
       "      <th>earliest_cr_line</th>\n",
       "      <th>inq_last_6mths</th>\n",
       "      <th>mths_since_last_delinq</th>\n",
       "      <th>mths_since_last_record</th>\n",
       "      <th>open_acc</th>\n",
       "      <th>pub_rec</th>\n",
       "      <th>revol_bal</th>\n",
       "      <th>revol_util</th>\n",
       "      <th>total_acc</th>\n",
       "      <th>initial_list_status</th>\n",
       "      <th>out_prncp</th>\n",
       "      <th>out_prncp_inv</th>\n",
       "      <th>total_pymnt</th>\n",
       "      <th>total_pymnt_inv</th>\n",
       "      <th>total_rec_prncp</th>\n",
       "      <th>total_rec_int</th>\n",
       "      <th>total_rec_late_fee</th>\n",
       "      <th>recoveries</th>\n",
       "      <th>collection_recovery_fee</th>\n",
       "      <th>last_pymnt_d</th>\n",
       "      <th>last_pymnt_amnt</th>\n",
       "      <th>next_pymnt_d</th>\n",
       "      <th>last_credit_pull_d</th>\n",
       "      <th>collections_12_mths_ex_med</th>\n",
       "      <th>mths_since_last_major_derog</th>\n",
       "      <th>policy_code</th>\n",
       "      <th>application_type</th>\n",
       "      <th>annual_inc_joint</th>\n",
       "      <th>dti_joint</th>\n",
       "      <th>verification_status_joint</th>\n",
       "      <th>acc_now_delinq</th>\n",
       "      <th>tot_coll_amt</th>\n",
       "      <th>tot_cur_bal</th>\n",
       "      <th>open_acc_6m</th>\n",
       "      <th>open_act_il</th>\n",
       "      <th>open_il_12m</th>\n",
       "      <th>open_il_24m</th>\n",
       "      <th>mths_since_rcnt_il</th>\n",
       "      <th>total_bal_il</th>\n",
       "      <th>il_util</th>\n",
       "      <th>open_rv_12m</th>\n",
       "      <th>open_rv_24m</th>\n",
       "      <th>max_bal_bc</th>\n",
       "      <th>all_util</th>\n",
       "      <th>total_rev_hi_lim</th>\n",
       "      <th>inq_fi</th>\n",
       "      <th>total_cu_tl</th>\n",
       "      <th>inq_last_12m</th>\n",
       "      <th>acc_open_past_24mths</th>\n",
       "      <th>avg_cur_bal</th>\n",
       "      <th>bc_open_to_buy</th>\n",
       "      <th>bc_util</th>\n",
       "      <th>chargeoff_within_12_mths</th>\n",
       "      <th>delinq_amnt</th>\n",
       "      <th>mo_sin_old_il_acct</th>\n",
       "      <th>mo_sin_old_rev_tl_op</th>\n",
       "      <th>mo_sin_rcnt_rev_tl_op</th>\n",
       "      <th>mo_sin_rcnt_tl</th>\n",
       "      <th>mort_acc</th>\n",
       "      <th>mths_since_recent_bc</th>\n",
       "      <th>mths_since_recent_bc_dlq</th>\n",
       "      <th>mths_since_recent_inq</th>\n",
       "      <th>mths_since_recent_revol_delinq</th>\n",
       "      <th>num_accts_ever_120_pd</th>\n",
       "      <th>num_actv_bc_tl</th>\n",
       "      <th>num_actv_rev_tl</th>\n",
       "      <th>num_bc_sats</th>\n",
       "      <th>num_bc_tl</th>\n",
       "      <th>num_il_tl</th>\n",
       "      <th>num_op_rev_tl</th>\n",
       "      <th>num_rev_accts</th>\n",
       "      <th>num_rev_tl_bal_gt_0</th>\n",
       "      <th>num_sats</th>\n",
       "      <th>num_tl_120dpd_2m</th>\n",
       "      <th>num_tl_30dpd</th>\n",
       "      <th>num_tl_90g_dpd_24m</th>\n",
       "      <th>num_tl_op_past_12m</th>\n",
       "      <th>pct_tl_nvr_dlq</th>\n",
       "      <th>percent_bc_gt_75</th>\n",
       "      <th>pub_rec_bankruptcies</th>\n",
       "      <th>tax_liens</th>\n",
       "      <th>tot_hi_cred_lim</th>\n",
       "      <th>total_bal_ex_mort</th>\n",
       "      <th>total_bc_limit</th>\n",
       "      <th>total_il_high_credit_limit</th>\n",
       "      <th>revol_bal_joint</th>\n",
       "      <th>sec_app_earliest_cr_line</th>\n",
       "      <th>sec_app_inq_last_6mths</th>\n",
       "      <th>sec_app_mort_acc</th>\n",
       "      <th>sec_app_open_acc</th>\n",
       "      <th>sec_app_revol_util</th>\n",
       "      <th>sec_app_open_act_il</th>\n",
       "      <th>sec_app_num_rev_accts</th>\n",
       "      <th>sec_app_chargeoff_within_12_mths</th>\n",
       "      <th>sec_app_collections_12_mths_ex_med</th>\n",
       "      <th>sec_app_mths_since_last_major_derog</th>\n",
       "      <th>hardship_flag</th>\n",
       "      <th>hardship_type</th>\n",
       "      <th>hardship_reason</th>\n",
       "      <th>hardship_status</th>\n",
       "      <th>deferral_term</th>\n",
       "      <th>hardship_amount</th>\n",
       "      <th>hardship_start_date</th>\n",
       "      <th>hardship_end_date</th>\n",
       "      <th>payment_plan_start_date</th>\n",
       "      <th>hardship_length</th>\n",
       "      <th>hardship_dpd</th>\n",
       "      <th>hardship_loan_status</th>\n",
       "      <th>orig_projected_additional_accrued_interest</th>\n",
       "      <th>hardship_payoff_balance_amount</th>\n",
       "      <th>hardship_last_payment_amount</th>\n",
       "      <th>disbursement_method</th>\n",
       "      <th>debt_settlement_flag</th>\n",
       "      <th>debt_settlement_flag_date</th>\n",
       "      <th>settlement_status</th>\n",
       "      <th>settlement_date</th>\n",
       "      <th>settlement_amount</th>\n",
       "      <th>settlement_percentage</th>\n",
       "      <th>settlement_term</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>1206983</td>\n",
       "      <td>1206983</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>105247</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1206983</td>\n",
       "      <td>1187738</td>\n",
       "      <td>0</td>\n",
       "      <td>12520</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1456</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>622762</td>\n",
       "      <td>1021293</td>\n",
       "      <td>5</td>\n",
       "      <td>8</td>\n",
       "      <td>6</td>\n",
       "      <td>1120</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>8</td>\n",
       "      <td>5</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2414</td>\n",
       "      <td>1</td>\n",
       "      <td>261622</td>\n",
       "      <td>31</td>\n",
       "      <td>15</td>\n",
       "      <td>895784</td>\n",
       "      <td>8</td>\n",
       "      <td>12</td>\n",
       "      <td>1104847</td>\n",
       "      <td>1104856</td>\n",
       "      <td>1109686</td>\n",
       "      <td>18</td>\n",
       "      <td>10302</td>\n",
       "      <td>10299</td>\n",
       "      <td>206300</td>\n",
       "      <td>206297</td>\n",
       "      <td>206304</td>\n",
       "      <td>206307</td>\n",
       "      <td>240368</td>\n",
       "      <td>206306</td>\n",
       "      <td>355256</td>\n",
       "      <td>206310</td>\n",
       "      <td>206308</td>\n",
       "      <td>206309</td>\n",
       "      <td>206487</td>\n",
       "      <td>10316</td>\n",
       "      <td>206310</td>\n",
       "      <td>206310</td>\n",
       "      <td>206313</td>\n",
       "      <td>6884</td>\n",
       "      <td>10370</td>\n",
       "      <td>21150</td>\n",
       "      <td>21696</td>\n",
       "      <td>39</td>\n",
       "      <td>28</td>\n",
       "      <td>50004</td>\n",
       "      <td>10310</td>\n",
       "      <td>10315</td>\n",
       "      <td>10314</td>\n",
       "      <td>6885</td>\n",
       "      <td>20333</td>\n",
       "      <td>933557</td>\n",
       "      <td>147619</td>\n",
       "      <td>815085</td>\n",
       "      <td>10318</td>\n",
       "      <td>10317</td>\n",
       "      <td>10319</td>\n",
       "      <td>8263</td>\n",
       "      <td>10317</td>\n",
       "      <td>10317</td>\n",
       "      <td>10317</td>\n",
       "      <td>10318</td>\n",
       "      <td>10317</td>\n",
       "      <td>8263</td>\n",
       "      <td>58317</td>\n",
       "      <td>10318</td>\n",
       "      <td>10316</td>\n",
       "      <td>10316</td>\n",
       "      <td>10341</td>\n",
       "      <td>21262</td>\n",
       "      <td>147</td>\n",
       "      <td>32</td>\n",
       "      <td>10309</td>\n",
       "      <td>6877</td>\n",
       "      <td>6882</td>\n",
       "      <td>10314</td>\n",
       "      <td>1112427</td>\n",
       "      <td>1112425</td>\n",
       "      <td>1112422</td>\n",
       "      <td>1112422</td>\n",
       "      <td>1112425</td>\n",
       "      <td>1114082</td>\n",
       "      <td>1112428</td>\n",
       "      <td>1112429</td>\n",
       "      <td>1112428</td>\n",
       "      <td>1112428</td>\n",
       "      <td>1175616</td>\n",
       "      <td>33</td>\n",
       "      <td>1198269</td>\n",
       "      <td>1198263</td>\n",
       "      <td>1198269</td>\n",
       "      <td>1198269</td>\n",
       "      <td>1198271</td>\n",
       "      <td>1198270</td>\n",
       "      <td>1198267</td>\n",
       "      <td>1198269</td>\n",
       "      <td>1198268</td>\n",
       "      <td>1198272</td>\n",
       "      <td>1198271</td>\n",
       "      <td>1200360</td>\n",
       "      <td>1198272</td>\n",
       "      <td>1198271</td>\n",
       "      <td>34</td>\n",
       "      <td>30</td>\n",
       "      <td>1173940</td>\n",
       "      <td>1173941</td>\n",
       "      <td>1173945</td>\n",
       "      <td>1173947</td>\n",
       "      <td>1173950</td>\n",
       "      <td>1173948</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        id  member_id  loan_amnt  funded_amnt  funded_amnt_inv  term  int_rate  installment  grade  sub_grade  emp_title  emp_length  home_ownership  annual_inc  verification_status  issue_d  loan_status  pymnt_plan      url     desc  purpose  title  zip_code  addr_state   dti  delinq_2yrs  earliest_cr_line  inq_last_6mths  mths_since_last_delinq  mths_since_last_record  open_acc  pub_rec  revol_bal  revol_util  total_acc  initial_list_status  out_prncp  out_prncp_inv  total_pymnt  total_pymnt_inv  total_rec_prncp  total_rec_int  total_rec_late_fee  recoveries  collection_recovery_fee  last_pymnt_d  last_pymnt_amnt  next_pymnt_d  last_credit_pull_d  collections_12_mths_ex_med  mths_since_last_major_derog  policy_code  application_type  annual_inc_joint  dti_joint  verification_status_joint  acc_now_delinq  tot_coll_amt  tot_cur_bal  open_acc_6m  open_act_il  open_il_12m  open_il_24m  mths_since_rcnt_il  total_bal_il  il_util  open_rv_12m  open_rv_24m  max_bal_bc  all_util  total_rev_hi_lim  inq_fi  total_cu_tl  inq_last_12m  acc_open_past_24mths  avg_cur_bal  bc_open_to_buy  bc_util  chargeoff_within_12_mths  delinq_amnt  mo_sin_old_il_acct  mo_sin_old_rev_tl_op  mo_sin_rcnt_rev_tl_op  mo_sin_rcnt_tl  mort_acc  mths_since_recent_bc  mths_since_recent_bc_dlq  mths_since_recent_inq  mths_since_recent_revol_delinq  num_accts_ever_120_pd  num_actv_bc_tl  num_actv_rev_tl  num_bc_sats  num_bc_tl  num_il_tl  num_op_rev_tl  num_rev_accts  num_rev_tl_bal_gt_0  num_sats  num_tl_120dpd_2m  num_tl_30dpd  num_tl_90g_dpd_24m  num_tl_op_past_12m  pct_tl_nvr_dlq  percent_bc_gt_75  pub_rec_bankruptcies  tax_liens  tot_hi_cred_lim  total_bal_ex_mort  total_bc_limit  total_il_high_credit_limit  revol_bal_joint  sec_app_earliest_cr_line  sec_app_inq_last_6mths  sec_app_mort_acc  sec_app_open_acc  sec_app_revol_util  sec_app_open_act_il  sec_app_num_rev_accts  sec_app_chargeoff_within_12_mths  sec_app_collections_12_mths_ex_med  sec_app_mths_since_last_major_derog  hardship_flag  hardship_type  hardship_reason  hardship_status  deferral_term  hardship_amount  hardship_start_date  hardship_end_date  payment_plan_start_date  hardship_length  hardship_dpd  hardship_loan_status  orig_projected_additional_accrued_interest  hardship_payoff_balance_amount  hardship_last_payment_amount  disbursement_method  debt_settlement_flag  debt_settlement_flag_date  settlement_status  settlement_date  settlement_amount  settlement_percentage  settlement_term\n",
       "0  1206983  1206983    0          0            0                0     0         0            0      0          105247     0           0               0           0                    0        0            0           1206983  1187738  0        12520  1         1           1456  1            1                 1               622762                  1021293                 5         8        6          1120        2          3                    5          8              5            2                3                1              2                   2           2                        2414          1                261622        31                  15                          895784                       8            12                1104847           1104856    1109686                    18              10302         10299        206300       206297       206304       206307       240368              206306        355256   206310       206308       206309      206487    10316             206310  206310       206313        6884                  10370        21150           21696    39                        28           50004               10310                 10315                  10314           6885      20333                 933557                    147619                 815085                          10318                  10317           10319            8263         10317      10317      10317          10318          10317                8263      58317             10318         10316               10316               10341           21262             147                   32         10309            6877               6882            10314                       1112427          1112425                   1112422                 1112422           1112425           1114082             1112428              1112429                1112428                           1112428                             1175616                              33             1198269        1198263          1198269          1198269        1198271          1198270              1198267            1198269                  1198268          1198272       1198271               1200360                                     1198272                         1198271                       34                   30                    1173940                    1173941            1173945          1173947            1173950                1173948        "
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Contains the nas present in all the columns in the dataset. We are planning to remove those coluomns with more than 50%Nas\n",
    "checkna_pd = current_df.select([count(when(isnan(c) | col(c).isNull(), c)).alias(c) for c in current_df.columns]).toPandas()\n",
    "checkna_pd\n",
    "\n",
    "# current_df.select([c for c in checkna_pd.columns])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "rows: 1206983\n",
      "columns: 145\n",
      "rows: 1206983\n",
      "columns: 102\n"
     ]
    }
   ],
   "source": [
    "#https://stackoverflow.com/questions/51322445/how-to-drop-all-columns-with-null-values-in-a-pyspark-dataframe - include in our references\n",
    "\n",
    "#Creating a dataframe which has the count of Nas of each column\n",
    "checkna = current_df.select([count(when(isnan(c) | col(c).isNull(), c)).alias(c) for c in current_df.columns])\n",
    "#Selecting the columns with NA values not greater than 50%\n",
    "No_of_rows = current_df.count()\n",
    "checkna_greater_than_50 = checkna.select([when(fn.col(c)<(No_of_rows*0.50),c).alias(c) for c in checkna.columns])\n",
    "\n",
    "\n",
    "def drop_null_columns(df):\n",
    "    \"\"\"\n",
    "    This function drops all columns which contain null values.\n",
    "    :param df: A PySpark DataFrame\n",
    "    \"\"\"\n",
    "    null_counts = df.select([fn.count(fn.when(fn.col(c).isNull()|isnan(fn.col(c)), c)).alias(c) for c in df.columns]).collect()[0].asDict()\n",
    "    to_drop = [k for k, v in null_counts.items() if v > 0]\n",
    "    df = df.drop(*to_drop)\n",
    "    return df\n",
    "\n",
    "# Using the function to find the list of columns with less than 50%Na values\n",
    "final_cols = drop_null_columns(checkna_greater_than_50)\n",
    "current_df1 = current_df.select([fn.col(c) for c in final_cols.columns])\n",
    "size_shape(current_df)\n",
    "size_shape(current_df1)\n",
    "#selecting our dataframe with the final cols\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Thats it Bois & Gals.. Use current_df1 for the win\n",
    "# current_df1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "26-50 Columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "part2=current_df1.select(current_df1.columns[25:50])\n",
    "# part2.columns\n",
    "# part2.limit(5).toPandas()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Drop date cols"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "rows: 1206983\n",
      "columns: 22\n",
      "None\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>pub_rec</th>\n",
       "      <th>revol_bal</th>\n",
       "      <th>revol_util</th>\n",
       "      <th>total_acc</th>\n",
       "      <th>initial_list_status</th>\n",
       "      <th>out_prncp</th>\n",
       "      <th>out_prncp_inv</th>\n",
       "      <th>total_pymnt</th>\n",
       "      <th>total_pymnt_inv</th>\n",
       "      <th>total_rec_prncp</th>\n",
       "      <th>total_rec_int</th>\n",
       "      <th>total_rec_late_fee</th>\n",
       "      <th>recoveries</th>\n",
       "      <th>collection_recovery_fee</th>\n",
       "      <th>last_pymnt_amnt</th>\n",
       "      <th>collections_12_mths_ex_med</th>\n",
       "      <th>policy_code</th>\n",
       "      <th>application_type</th>\n",
       "      <th>acc_now_delinq</th>\n",
       "      <th>tot_coll_amt</th>\n",
       "      <th>tot_cur_bal</th>\n",
       "      <th>open_acc_6m</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>4341</td>\n",
       "      <td>10.3</td>\n",
       "      <td>34</td>\n",
       "      <td>w</td>\n",
       "      <td>2386.02</td>\n",
       "      <td>2386.02</td>\n",
       "      <td>167.02</td>\n",
       "      <td>167.02</td>\n",
       "      <td>113.98</td>\n",
       "      <td>53.04</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>84.92</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>Individual</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>16901</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>12315</td>\n",
       "      <td>24.2</td>\n",
       "      <td>44</td>\n",
       "      <td>w</td>\n",
       "      <td>29387.75</td>\n",
       "      <td>29387.75</td>\n",
       "      <td>1507.11</td>\n",
       "      <td>1507.11</td>\n",
       "      <td>612.25</td>\n",
       "      <td>894.86</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>777.23</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>Individual</td>\n",
       "      <td>0</td>\n",
       "      <td>1208</td>\n",
       "      <td>321915</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>4599</td>\n",
       "      <td>19.1</td>\n",
       "      <td>13</td>\n",
       "      <td>w</td>\n",
       "      <td>4787.21</td>\n",
       "      <td>4787.21</td>\n",
       "      <td>353.89</td>\n",
       "      <td>353.89</td>\n",
       "      <td>212.79</td>\n",
       "      <td>141.10</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>180.69</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>Individual</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>110299</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>5468</td>\n",
       "      <td>78.1</td>\n",
       "      <td>13</td>\n",
       "      <td>w</td>\n",
       "      <td>3831.93</td>\n",
       "      <td>3831.93</td>\n",
       "      <td>286.71</td>\n",
       "      <td>286.71</td>\n",
       "      <td>168.07</td>\n",
       "      <td>118.64</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>146.51</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>Individual</td>\n",
       "      <td>0</td>\n",
       "      <td>686</td>\n",
       "      <td>305049</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>829</td>\n",
       "      <td>3.6</td>\n",
       "      <td>26</td>\n",
       "      <td>w</td>\n",
       "      <td>29339.02</td>\n",
       "      <td>29339.02</td>\n",
       "      <td>1423.21</td>\n",
       "      <td>1423.21</td>\n",
       "      <td>660.98</td>\n",
       "      <td>762.23</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>731.78</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>Individual</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>116007</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  pub_rec revol_bal revol_util total_acc initial_list_status out_prncp out_prncp_inv total_pymnt total_pymnt_inv total_rec_prncp total_rec_int total_rec_late_fee recoveries collection_recovery_fee last_pymnt_amnt collections_12_mths_ex_med policy_code application_type acc_now_delinq tot_coll_amt tot_cur_bal open_acc_6m\n",
       "0  1       4341      10.3       34        w                   2386.02   2386.02       167.02      167.02          113.98          53.04         0.0                0.0        0.0                     84.92           0                          1           Individual       0              0            16901       2         \n",
       "1  1       12315     24.2       44        w                   29387.75  29387.75      1507.11     1507.11         612.25          894.86        0.0                0.0        0.0                     777.23          0                          1           Individual       0              1208         321915      4         \n",
       "2  0       4599      19.1       13        w                   4787.21   4787.21       353.89      353.89          212.79          141.10        0.0                0.0        0.0                     180.69          0                          1           Individual       0              0            110299      0         \n",
       "3  0       5468      78.1       13        w                   3831.93   3831.93       286.71      286.71          168.07          118.64        0.0                0.0        0.0                     146.51          0                          1           Individual       0              686          305049      1         \n",
       "4  0       829       3.6        26        w                   29339.02  29339.02      1423.21     1423.21         660.98          762.23        0.0                0.0        0.0                     731.78          0                          1           Individual       0              0            116007      3         "
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# drop the cols\n",
    "date_var=['last_pymnt_d','next_pymnt_d','last_credit_pull_d']\n",
    "part2=part2.drop(*date_var)\n",
    "print(size_shape(part2))\n",
    "part2.limit(5).toPandas()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "root\n",
      " |-- pub_rec: string (nullable = true)\n",
      " |-- revol_bal: string (nullable = true)\n",
      " |-- revol_util: string (nullable = true)\n",
      " |-- total_acc: string (nullable = true)\n",
      " |-- initial_list_status: string (nullable = true)\n",
      " |-- out_prncp: string (nullable = true)\n",
      " |-- out_prncp_inv: string (nullable = true)\n",
      " |-- total_pymnt: string (nullable = true)\n",
      " |-- total_pymnt_inv: string (nullable = true)\n",
      " |-- total_rec_prncp: string (nullable = true)\n",
      " |-- total_rec_int: string (nullable = true)\n",
      " |-- total_rec_late_fee: string (nullable = true)\n",
      " |-- recoveries: string (nullable = true)\n",
      " |-- collection_recovery_fee: string (nullable = true)\n",
      " |-- last_pymnt_amnt: string (nullable = true)\n",
      " |-- collections_12_mths_ex_med: string (nullable = true)\n",
      " |-- policy_code: string (nullable = true)\n",
      " |-- application_type: string (nullable = true)\n",
      " |-- acc_now_delinq: string (nullable = true)\n",
      " |-- tot_coll_amt: string (nullable = true)\n",
      " |-- tot_cur_bal: string (nullable = true)\n",
      " |-- open_acc_6m: string (nullable = true)\n",
      "\n"
     ]
    }
   ],
   "source": [
    "part2.printSchema()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>summary</td>\n",
       "      <td>count</td>\n",
       "      <td>mean</td>\n",
       "      <td>stddev</td>\n",
       "      <td>min</td>\n",
       "      <td>max</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>pub_rec</td>\n",
       "      <td>1206975</td>\n",
       "      <td>0.1890756536458096</td>\n",
       "      <td>0.5624775092187297</td>\n",
       "      <td>PAYING DEBIT OFF.&lt;br/&gt;SLOW--BUT SURE.&lt;br/&gt; Borrower added on 06/02/10 &gt; JUST A MAN</td>\n",
       "      <td>debt_consolidation</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>revol_bal</td>\n",
       "      <td>1206977</td>\n",
       "      <td>16807.967260173642</td>\n",
       "      <td>22685.863720159345</td>\n",
       "      <td>LOOKING FOR A HAND-UP</td>\n",
       "      <td>To be rewarded with reasonable terms...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>revol_util</td>\n",
       "      <td>1205863</td>\n",
       "      <td>49.61285204510645</td>\n",
       "      <td>25.884634838940773</td>\n",
       "      <td>and -- with the support of the members of the Lending Club -- we will prevail. Thank you for being a part of our future.&lt;br/&gt; Borrower added on 05/24/10 &gt; Here is some additional information about our company</td>\n",
       "      <td>Mar-1994</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>total_acc</td>\n",
       "      <td>1206981</td>\n",
       "      <td>23.450838130462017</td>\n",
       "      <td>42.4613450933239</td>\n",
       "      <td>and the work we do.&lt;br/&gt;&lt;br/&gt;We are in the marketing research and consulting business. Our main task is to speak with customers</td>\n",
       "      <td>small_business</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>initial_list_status</td>\n",
       "      <td>1206980</td>\n",
       "      <td>926.0172727272726</td>\n",
       "      <td>3263.110236056832</td>\n",
       "      <td>IN ME. .&lt;br/&gt;\"</td>\n",
       "      <td>w</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>out_prncp</td>\n",
       "      <td>1206978</td>\n",
       "      <td>8245.914858687509</td>\n",
       "      <td>8619.409939480662</td>\n",
       "      <td>but now I am completely back on track &amp; am doing whatever I can to raise my credit score back up</td>\n",
       "      <td>f</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>out_prncp_inv</td>\n",
       "      <td>1206975</td>\n",
       "      <td>8244.153263444356</td>\n",
       "      <td>8618.754491613367</td>\n",
       "      <td>but in a nutshell we provide direct-from-the-customer data</td>\n",
       "      <td>f</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>total_pymnt</td>\n",
       "      <td>1206978</td>\n",
       "      <td>7857.123649318276</td>\n",
       "      <td>7372.222174135592</td>\n",
       "      <td>and opinions</td>\n",
       "      <td>w</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>total_pymnt_inv</td>\n",
       "      <td>1206981</td>\n",
       "      <td>7852.0274051305105</td>\n",
       "      <td>7369.046643175955</td>\n",
       "      <td>extremely rare to miss work.&lt;br/&gt;&lt;br/&gt;It's extremely late</td>\n",
       "      <td>f</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>total_rec_prncp</td>\n",
       "      <td>1206980</td>\n",
       "      <td>5160.8152297105835</td>\n",
       "      <td>5195.473326471696</td>\n",
       "      <td>I need to hit the hay. If this loan even funds for the original amount (slightly lower APR) in comment that I was considering</td>\n",
       "      <td>f</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>total_rec_int</td>\n",
       "      <td>1206982</td>\n",
       "      <td>2440.0997156951144</td>\n",
       "      <td>2747.4575185324143</td>\n",
       "      <td>of $2</td>\n",
       "      <td>9999.70</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>total_rec_late_fee</td>\n",
       "      <td>1206981</td>\n",
       "      <td>1.9962355018726892</td>\n",
       "      <td>29.011852245782418</td>\n",
       "      <td>and continue to build upon them.&lt;br/&gt;\"</td>\n",
       "      <td>f</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>recoveries</td>\n",
       "      <td>1206981</td>\n",
       "      <td>254.5253475258523</td>\n",
       "      <td>977.1667932879081</td>\n",
       "      <td>0</td>\n",
       "      <td>small_business</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>collection_recovery_fee</td>\n",
       "      <td>1206981</td>\n",
       "      <td>42.2471526738202</td>\n",
       "      <td>171.24312905191488</td>\n",
       "      <td>0.0</td>\n",
       "      <td>xperienceddebtorqualifiedfor4xthisamount</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>last_pymnt_amnt</td>\n",
       "      <td>1206982</td>\n",
       "      <td>489.2054205197111</td>\n",
       "      <td>700.1138703432373</td>\n",
       "      <td>0.0</td>\n",
       "      <td>f</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>collections_12_mths_ex_med</td>\n",
       "      <td>1206968</td>\n",
       "      <td>0.037906233766018566</td>\n",
       "      <td>7.306349267798215</td>\n",
       "      <td>0</td>\n",
       "      <td>f</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>policy_code</td>\n",
       "      <td>1206975</td>\n",
       "      <td>1.0043449498414203</td>\n",
       "      <td>3.1299861759471175</td>\n",
       "      <td>0</td>\n",
       "      <td>f</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>application_type</td>\n",
       "      <td>1206971</td>\n",
       "      <td>1248.264375</td>\n",
       "      <td>4416.798379304432</td>\n",
       "      <td>0</td>\n",
       "      <td>Oct-2016</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>acc_now_delinq</td>\n",
       "      <td>1206965</td>\n",
       "      <td>0.008077810776460108</td>\n",
       "      <td>4.894703732813887</td>\n",
       "      <td>0</td>\n",
       "      <td>Individual</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>tot_coll_amt</td>\n",
       "      <td>1196681</td>\n",
       "      <td>216.85500005849536</td>\n",
       "      <td>1699.2516375435855</td>\n",
       "      <td>0</td>\n",
       "      <td>Oct-2016</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>tot_cur_bal</td>\n",
       "      <td>1196684</td>\n",
       "      <td>138926.9121216863</td>\n",
       "      <td>159336.07953433666</td>\n",
       "      <td>0</td>\n",
       "      <td>f</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>open_acc_6m</td>\n",
       "      <td>1000683</td>\n",
       "      <td>0.9026380214214762</td>\n",
       "      <td>1.4790538763597334</td>\n",
       "      <td>0</td>\n",
       "      <td>Individual</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                  0                     1                   2                                                                                                                                                                                                                  3                                         4\n",
       "summary                     count    mean                  stddev              min                                                                                                                                                                                                                max                                     \n",
       "pub_rec                     1206975  0.1890756536458096    0.5624775092187297   PAYING DEBIT OFF.<br/>SLOW--BUT SURE.<br/> Borrower added on 06/02/10 > JUST A MAN                                                                                                                                debt_consolidation                      \n",
       "revol_bal                   1206977  16807.967260173642    22685.863720159345   LOOKING FOR A HAND-UP                                                                                                                                                                                             To be rewarded with reasonable terms... \n",
       "revol_util                  1205863  49.61285204510645     25.884634838940773   and -- with the support of the members of the Lending Club -- we will prevail. Thank you for being a part of our future.<br/> Borrower added on 05/24/10 > Here is some additional information about our company  Mar-1994                                \n",
       "total_acc                   1206981  23.450838130462017    42.4613450933239     and the work we do.<br/><br/>We are in the marketing research and consulting business. Our main task is to speak with customers                                                                                   small_business                          \n",
       "initial_list_status         1206980  926.0172727272726     3263.110236056832    IN ME. .<br/>\"                                                                                                                                                                                                    w                                       \n",
       "out_prncp                   1206978  8245.914858687509     8619.409939480662    but now I am completely back on track & am doing whatever I can to raise my credit score back up                                                                                                                  f                                       \n",
       "out_prncp_inv               1206975  8244.153263444356     8618.754491613367    but in a nutshell we provide direct-from-the-customer data                                                                                                                                                        f                                       \n",
       "total_pymnt                 1206978  7857.123649318276     7372.222174135592    and opinions                                                                                                                                                                                                      w                                       \n",
       "total_pymnt_inv             1206981  7852.0274051305105    7369.046643175955    extremely rare to miss work.<br/><br/>It's extremely late                                                                                                                                                         f                                       \n",
       "total_rec_prncp             1206980  5160.8152297105835    5195.473326471696    I need to hit the hay. If this loan even funds for the original amount (slightly lower APR) in comment that I was considering                                                                                     f                                       \n",
       "total_rec_int               1206982  2440.0997156951144    2747.4575185324143   of $2                                                                                                                                                                                                             9999.70                                 \n",
       "total_rec_late_fee          1206981  1.9962355018726892    29.011852245782418   and continue to build upon them.<br/>\"                                                                                                                                                                            f                                       \n",
       "recoveries                  1206981  254.5253475258523     977.1667932879081   0                                                                                                                                                                                                                  small_business                          \n",
       "collection_recovery_fee     1206981  42.2471526738202      171.24312905191488  0.0                                                                                                                                                                                                                xperienceddebtorqualifiedfor4xthisamount\n",
       "last_pymnt_amnt             1206982  489.2054205197111     700.1138703432373   0.0                                                                                                                                                                                                                f                                       \n",
       "collections_12_mths_ex_med  1206968  0.037906233766018566  7.306349267798215   0                                                                                                                                                                                                                  f                                       \n",
       "policy_code                 1206975  1.0043449498414203    3.1299861759471175  0                                                                                                                                                                                                                  f                                       \n",
       "application_type            1206971  1248.264375           4416.798379304432   0                                                                                                                                                                                                                  Oct-2016                                \n",
       "acc_now_delinq              1206965  0.008077810776460108  4.894703732813887   0                                                                                                                                                                                                                  Individual                              \n",
       "tot_coll_amt                1196681  216.85500005849536    1699.2516375435855  0                                                                                                                                                                                                                  Oct-2016                                \n",
       "tot_cur_bal                 1196684  138926.9121216863     159336.07953433666  0                                                                                                                                                                                                                  f                                       \n",
       "open_acc_6m                 1000683  0.9026380214214762    1.4790538763597334  0                                                                                                                                                                                                                  Individual                              "
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# check the summary of each col\n",
    "part2.describe().toPandas().T"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>pub_rec</th>\n",
       "      <th>revol_bal</th>\n",
       "      <th>revol_util</th>\n",
       "      <th>total_acc</th>\n",
       "      <th>initial_list_status</th>\n",
       "      <th>out_prncp</th>\n",
       "      <th>out_prncp_inv</th>\n",
       "      <th>total_pymnt</th>\n",
       "      <th>total_pymnt_inv</th>\n",
       "      <th>total_rec_prncp</th>\n",
       "      <th>total_rec_int</th>\n",
       "      <th>total_rec_late_fee</th>\n",
       "      <th>recoveries</th>\n",
       "      <th>collection_recovery_fee</th>\n",
       "      <th>last_pymnt_amnt</th>\n",
       "      <th>collections_12_mths_ex_med</th>\n",
       "      <th>policy_code</th>\n",
       "      <th>application_type</th>\n",
       "      <th>acc_now_delinq</th>\n",
       "      <th>tot_coll_amt</th>\n",
       "      <th>tot_cur_bal</th>\n",
       "      <th>open_acc_6m</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>8</td>\n",
       "      <td>6</td>\n",
       "      <td>1120</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>8</td>\n",
       "      <td>5</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>15</td>\n",
       "      <td>8</td>\n",
       "      <td>12</td>\n",
       "      <td>18</td>\n",
       "      <td>10302</td>\n",
       "      <td>10299</td>\n",
       "      <td>206300</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   pub_rec  revol_bal  revol_util  total_acc  initial_list_status  out_prncp  out_prncp_inv  total_pymnt  total_pymnt_inv  total_rec_prncp  total_rec_int  total_rec_late_fee  recoveries  collection_recovery_fee  last_pymnt_amnt  collections_12_mths_ex_med  policy_code  application_type  acc_now_delinq  tot_coll_amt  tot_cur_bal  open_acc_6m\n",
       "0  8        6          1120        2          3                    5          8              5            2                3                1              2                   2           2                        1                15                          8            12                18              10302         10299        206300     "
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# check the missing values\n",
    "checkna_part2 = part2.select([count(when(isnan(c) | col(c).isNull(), c)).alias(c) for c in part2.columns])\n",
    "checkna_part2.toPandas()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Cope with 3 categorical variables: 'initial_list_status', 'application_type', 'policy_code'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "root\n",
      " |-- initial_list_status: string (nullable = true)\n",
      " |-- application_type: string (nullable = true)\n",
      " |-- policy_code: string (nullable = true)\n",
      "\n"
     ]
    }
   ],
   "source": [
    "cat_col=['initial_list_status', 'application_type','policy_code']\n",
    "part2_cat_col=part2.select(cat_col)\n",
    "part2_cat_col.printSchema()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "part2=part2.filter(\"initial_list_status in ('w','f')\")\n",
    "part2=part2.filter(\"application_type in ('Individual','Joint App')\")\n",
    "part2=part2.filter(\"policy_code in ('1','2')\")\n",
    "# part2.select(fn.countDistinct(\"initial_list_status\")).show() returns 2\n",
    "# part2.select(\"application_type\").distinct().show() returns 'Joint App' and 'Individual'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+----------------+-------+\n",
      "|application_type|  count|\n",
      "+----------------+-------+\n",
      "|      Individual|1104844|\n",
      "|       Joint App| 102105|\n",
      "+----------------+-------+\n",
      "\n"
     ]
    }
   ],
   "source": [
    "part2.groupBy(\"application_type\").count().orderBy(\"count\",ascending=False).show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+-------------------+------+\n",
      "|initial_list_status| count|\n",
      "+-------------------+------+\n",
      "|                  w|930185|\n",
      "|                  f|276764|\n",
      "+-------------------+------+\n",
      "\n"
     ]
    }
   ],
   "source": [
    "part2.groupBy(\"initial_list_status\").count().orderBy(\"count\",ascending=False).show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+-----------+-------+\n",
      "|policy_code|  count|\n",
      "+-----------+-------+\n",
      "|          1|1206949|\n",
      "+-----------+-------+\n",
      "\n"
     ]
    }
   ],
   "source": [
    "part2.groupBy(\"policy_code\").count().orderBy(\"count\",ascending=False).show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In this case, the variable 'policy_code' should be dropped because all the samples belong to one category, which doesn't provide any useful information for classification."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+-------------+-------+\n",
      "|  policy_code|  count|\n",
      "+-------------+-------+\n",
      "|            1|1206949|\n",
      "|            0|      8|\n",
      "|         null|      8|\n",
      "|          0.0|      4|\n",
      "|89.1377999988|      1|\n",
      "|30.2849999999|      1|\n",
      "|         1926|      1|\n",
      "|       121.95|      1|\n",
      "|     Jan-2018|      1|\n",
      "|         5.73|      1|\n",
      "|         1.76|      1|\n",
      "|            f|      1|\n",
      "|     Oct-2016|      1|\n",
      "|       200.68|      1|\n",
      "|         3.84|      1|\n",
      "|      2838.85|      1|\n",
      "|           49|      1|\n",
      "|         0.00|      1|\n",
      "+-------------+-------+\n",
      "\n"
     ]
    }
   ],
   "source": [
    "current_df.groupBy(\"policy_code\").count().orderBy(\"count\",ascending=False).show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "part2=part2.drop(\"policy_code\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>pub_rec</th>\n",
       "      <th>revol_bal</th>\n",
       "      <th>revol_util</th>\n",
       "      <th>total_acc</th>\n",
       "      <th>initial_list_status</th>\n",
       "      <th>out_prncp</th>\n",
       "      <th>out_prncp_inv</th>\n",
       "      <th>total_pymnt</th>\n",
       "      <th>total_pymnt_inv</th>\n",
       "      <th>total_rec_prncp</th>\n",
       "      <th>total_rec_int</th>\n",
       "      <th>total_rec_late_fee</th>\n",
       "      <th>recoveries</th>\n",
       "      <th>collection_recovery_fee</th>\n",
       "      <th>last_pymnt_amnt</th>\n",
       "      <th>collections_12_mths_ex_med</th>\n",
       "      <th>application_type</th>\n",
       "      <th>acc_now_delinq</th>\n",
       "      <th>tot_coll_amt</th>\n",
       "      <th>tot_cur_bal</th>\n",
       "      <th>open_acc_6m</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1115</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>10285</td>\n",
       "      <td>10285</td>\n",
       "      <td>206280</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   pub_rec  revol_bal  revol_util  total_acc  initial_list_status  out_prncp  out_prncp_inv  total_pymnt  total_pymnt_inv  total_rec_prncp  total_rec_int  total_rec_late_fee  recoveries  collection_recovery_fee  last_pymnt_amnt  collections_12_mths_ex_med  application_type  acc_now_delinq  tot_coll_amt  tot_cur_bal  open_acc_6m\n",
       "0  0        0          1115        0          0                    0          0              0            0                0                0              0                   0           0                        0                6                           0                 0               10285         10285        206280     "
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "part2.select([count(when(isnan(c) | col(c).isNull(), c)).alias(c) for c in part2.columns]).toPandas()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Cope with numerical variables"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "part2_num_col=part2.drop(*cat_col)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "root\n",
      " |-- pub_rec: string (nullable = true)\n",
      " |-- revol_bal: string (nullable = true)\n",
      " |-- revol_util: string (nullable = true)\n",
      " |-- total_acc: string (nullable = true)\n",
      " |-- out_prncp: string (nullable = true)\n",
      " |-- out_prncp_inv: string (nullable = true)\n",
      " |-- total_pymnt: string (nullable = true)\n",
      " |-- total_pymnt_inv: string (nullable = true)\n",
      " |-- total_rec_prncp: string (nullable = true)\n",
      " |-- total_rec_int: string (nullable = true)\n",
      " |-- total_rec_late_fee: string (nullable = true)\n",
      " |-- recoveries: string (nullable = true)\n",
      " |-- collection_recovery_fee: string (nullable = true)\n",
      " |-- last_pymnt_amnt: string (nullable = true)\n",
      " |-- collections_12_mths_ex_med: string (nullable = true)\n",
      " |-- acc_now_delinq: string (nullable = true)\n",
      " |-- tot_coll_amt: string (nullable = true)\n",
      " |-- tot_cur_bal: string (nullable = true)\n",
      " |-- open_acc_6m: string (nullable = true)\n",
      "\n"
     ]
    }
   ],
   "source": [
    "part2_num_col.printSchema()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's start with 'pub_rec' variable"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+-----------------------+\n",
      "|count(DISTINCT pub_rec)|\n",
      "+-----------------------+\n",
      "|                     35|\n",
      "+-----------------------+\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# how many distinct values in pub_rec feature\n",
    "part2.select(fn.countDistinct(\"pub_rec\")).show()\n",
    "# number of samples that have pub_rec\n",
    "# part2.filter(fn.col('pub_rec')!=0).count() returns 185562"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "# print the distinct values \n",
    "# part2.select('pub_rec').distinct().show(52)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "# # REPLACE 11.59 15.31 etc\n",
    "# # [0-9]+\\.[0-9]+\n",
    "# part2=part2.withColumn('pub_rec',fn.regexp_replace(fn.col(\"pub_rec\"), \"[0-9]+\\.[0-9]+\", \"null\"))\n",
    "\n",
    "# # remove strings\n",
    "# # ^[\\D]+.*$\n",
    "# part2=part2.withColumn('pub_rec',fn.regexp_replace(fn.col(\"pub_rec\"), \"^[\\D]+.*$\", \"null\"))\n",
    "\n",
    "# # remove 120XX\n",
    "# # (^.*[\\D]+$)\n",
    "# part2=part2.withColumn('pub_rec',fn.regexp_replace(fn.col(\"pub_rec\"), \"(^.*[\\D]+$)\", \"null\"))\n",
    "\n",
    "# part2.select(fn.countDistinct(\"pub_rec\")).show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+-------+-------------------+\n",
      "|summary|            pub_rec|\n",
      "+-------+-------------------+\n",
      "|  count|            1206949|\n",
      "|   mean|0.18891601882101067|\n",
      "| stddev| 0.5552736651970246|\n",
      "|    min|                  0|\n",
      "|    max|                  9|\n",
      "+-------+-------------------+\n",
      "\n"
     ]
    }
   ],
   "source": [
    "part2.describe('pub_rec').show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+-------+------------------+\n",
      "|summary|         revol_bal|\n",
      "+-------+------------------+\n",
      "|  count|           1206949|\n",
      "|   mean|16808.217865046492|\n",
      "| stddev| 22685.94006979832|\n",
      "|    min|                 0|\n",
      "|    max|             99996|\n",
      "+-------+------------------+\n",
      "\n"
     ]
    }
   ],
   "source": [
    "part2.describe('revol_bal').show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We conver the data type of each col to integer or float"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [],
   "source": [
    "part2 = part2.withColumn('pub_rec', part2['pub_rec'].cast(IntegerType()))\n",
    "part2 = part2.withColumn('revol_bal', part2['revol_bal'].cast(FloatType()))\n",
    "part2 = part2.withColumn('revol_util',part2['revol_util'].cast(FloatType()))\n",
    "part2 = part2.withColumn('total_acc', part2['total_acc'].cast(IntegerType()))\n",
    "part2 = part2.withColumn('out_prncp', part2['out_prncp'].cast(FloatType()))\n",
    "part2 = part2.withColumn('out_prncp_inv', part2['out_prncp_inv'].cast(FloatType()))\n",
    "part2 = part2.withColumn('total_pymnt', part2['total_pymnt'].cast(FloatType()))\n",
    "part2 = part2.withColumn('total_pymnt_inv', part2['total_pymnt_inv'].cast(FloatType()))\n",
    "part2 = part2.withColumn('total_rec_prncp', part2['total_rec_prncp'].cast(FloatType()))\n",
    "part2 = part2.withColumn('total_rec_int', part2['total_rec_int'].cast(FloatType()))\n",
    "part2 = part2.withColumn('total_rec_late_fee', part2['total_rec_late_fee'].cast(FloatType()))\n",
    "part2 = part2.withColumn('recoveries', part2['recoveries'].cast(FloatType()))\n",
    "part2 = part2.withColumn('collection_recovery_fee', part2['collection_recovery_fee'].cast(FloatType()))\n",
    "part2 = part2.withColumn('last_pymnt_amnt', part2['last_pymnt_amnt'].cast(FloatType()))\n",
    "part2 = part2.withColumn('collections_12_mths_ex_med', part2['collections_12_mths_ex_med'].cast(IntegerType()))\n",
    "part2 = part2.withColumn('acc_now_delinq', part2['acc_now_delinq'].cast(IntegerType()))\n",
    "part2 = part2.withColumn(\"open_acc_6m\",part2[\"open_acc_6m\"].cast(IntegerType()))\n",
    "part2 = part2.withColumn(\"tot_coll_amt\",part2[\"tot_coll_amt\"].cast(FloatType()))\n",
    "part2 = part2.withColumn(\"tot_cur_bal\",part2[\"tot_cur_bal\"].cast(FloatType()))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "root\n",
      " |-- pub_rec: integer (nullable = true)\n",
      " |-- revol_bal: float (nullable = true)\n",
      " |-- revol_util: float (nullable = true)\n",
      " |-- total_acc: integer (nullable = true)\n",
      " |-- initial_list_status: string (nullable = true)\n",
      " |-- out_prncp: float (nullable = true)\n",
      " |-- out_prncp_inv: float (nullable = true)\n",
      " |-- total_pymnt: float (nullable = true)\n",
      " |-- total_pymnt_inv: float (nullable = true)\n",
      " |-- total_rec_prncp: float (nullable = true)\n",
      " |-- total_rec_int: float (nullable = true)\n",
      " |-- total_rec_late_fee: float (nullable = true)\n",
      " |-- recoveries: float (nullable = true)\n",
      " |-- collection_recovery_fee: float (nullable = true)\n",
      " |-- last_pymnt_amnt: float (nullable = true)\n",
      " |-- collections_12_mths_ex_med: integer (nullable = true)\n",
      " |-- application_type: string (nullable = true)\n",
      " |-- acc_now_delinq: integer (nullable = true)\n",
      " |-- tot_coll_amt: float (nullable = true)\n",
      " |-- tot_cur_bal: float (nullable = true)\n",
      " |-- open_acc_6m: integer (nullable = true)\n",
      "\n"
     ]
    }
   ],
   "source": [
    "part2.printSchema()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>pub_rec</th>\n",
       "      <th>revol_bal</th>\n",
       "      <th>revol_util</th>\n",
       "      <th>total_acc</th>\n",
       "      <th>initial_list_status</th>\n",
       "      <th>out_prncp</th>\n",
       "      <th>out_prncp_inv</th>\n",
       "      <th>total_pymnt</th>\n",
       "      <th>total_pymnt_inv</th>\n",
       "      <th>total_rec_prncp</th>\n",
       "      <th>total_rec_int</th>\n",
       "      <th>total_rec_late_fee</th>\n",
       "      <th>recoveries</th>\n",
       "      <th>collection_recovery_fee</th>\n",
       "      <th>last_pymnt_amnt</th>\n",
       "      <th>collections_12_mths_ex_med</th>\n",
       "      <th>application_type</th>\n",
       "      <th>acc_now_delinq</th>\n",
       "      <th>tot_coll_amt</th>\n",
       "      <th>tot_cur_bal</th>\n",
       "      <th>open_acc_6m</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1115</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>10285</td>\n",
       "      <td>10285</td>\n",
       "      <td>206280</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   pub_rec  revol_bal  revol_util  total_acc  initial_list_status  out_prncp  out_prncp_inv  total_pymnt  total_pymnt_inv  total_rec_prncp  total_rec_int  total_rec_late_fee  recoveries  collection_recovery_fee  last_pymnt_amnt  collections_12_mths_ex_med  application_type  acc_now_delinq  tot_coll_amt  tot_cur_bal  open_acc_6m\n",
       "0  0        0          1115        0          0                    0          0              0            0                0                0              0                   0           0                        0                6                           0                 0               10285         10285        206280     "
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "part2.select([count(when(isnan(c) | col(c).isNull(), c)).alias(c) for c in part2.columns]).toPandas()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now let's cope with the columns with missing values:revol_util, collections_12_mths_ex_med, tot_coll_amt, tot_cur_bal, open_acc_6m <br>\n",
    "By replacing the missing values with the mean values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+-------+-----------------+\n",
      "|summary|       revol_util|\n",
      "+-------+-----------------+\n",
      "|  count|          1205834|\n",
      "|   mean|49.60215702112277|\n",
      "| stddev|24.76317095036885|\n",
      "|    min|              0.0|\n",
      "|    max|            366.6|\n",
      "+-------+-----------------+\n",
      "\n"
     ]
    }
   ],
   "source": [
    "part2.describe('revol_util').show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "49.60215702112277"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "revol_util_mean=part2.select(fn.avg('revol_util')).collect()\n",
    "revol_util_mean[0][0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [],
   "source": [
    "part2 = part2.na.fill({'revol_util':revol_util_mean[0][0]})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+--------------------------------------------------------------------------+\n",
      "|count(CASE WHEN (isnan(revol_util) OR (revol_util IS NULL)) THEN true END)|\n",
      "+--------------------------------------------------------------------------+\n",
      "|                                                                         0|\n",
      "+--------------------------------------------------------------------------+\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# part2.select([count(when(isnan('revol_util'),True))]).show()\n",
    "# part2.select([count(when(col('revol_util').isNull(),True))]).show()\n",
    "part2.select([count(when(isnan('revol_util') | col('revol_util').isNull() , True))]).show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.distplot(part2.select('revol_util').collect(),kde=False).set_title('Distribution of Revolving line utilization rate');"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [],
   "source": [
    "# part2.select('revol_util').toPandas()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "part2.select('revol_util').toPandas().plot.hist(bins=50, rwidth=0.9, alpha=0.5, title='test');"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "tot_coll_amt_mean=part2.select(fn.avg('tot_coll_amt')).collect()\n",
    "part2 = part2.na.fill({'tot_coll_amt':tot_coll_amt_mean[0][0]})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [],
   "source": [
    "tot_cur_bal_mean=part2.select(fn.avg('tot_cur_bal')).collect()\n",
    "part2 = part2.na.fill({'tot_cur_bal':tot_cur_bal_mean[0][0]})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [],
   "source": [
    "open_acc_6m_mean=part2.select(fn.avg('open_acc_6m')).collect()\n",
    "part2 = part2.na.fill({'open_acc_6m':open_acc_6m_mean[0][0]})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [],
   "source": [
    "collections_12_mths_ex_med_mean=part2.select(fn.avg('collections_12_mths_ex_med')).collect()\n",
    "part2 = part2.na.fill({'collections_12_mths_ex_med':collections_12_mths_ex_med_mean[0][0]})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+-------+------------------+\n",
      "|summary|      tot_coll_amt|\n",
      "+-------+------------------+\n",
      "|  count|           1196664|\n",
      "|   mean|216.85304396221497|\n",
      "| stddev|1699.2584198528266|\n",
      "|    min|               0.0|\n",
      "|    max|          262740.0|\n",
      "+-------+------------------+\n",
      "\n"
     ]
    }
   ],
   "source": [
    "#part2.describe('tot_coll_amt').show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+-------+------------------+\n",
      "|summary|       tot_cur_bal|\n",
      "+-------+------------------+\n",
      "|  count|           1196664|\n",
      "|   mean|138929.00075961172|\n",
      "| stddev|159336.36778367285|\n",
      "|    min|               0.0|\n",
      "|    max|         9971659.0|\n",
      "+-------+------------------+\n",
      "\n"
     ]
    }
   ],
   "source": [
    "#part2.describe('tot_cur_bal').show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+-------+------------------+\n",
      "|summary|       open_acc_6m|\n",
      "+-------+------------------+\n",
      "|  count|           1000669|\n",
      "|   mean|0.9013469988577641|\n",
      "| stddev| 1.121407164365087|\n",
      "|    min|                 0|\n",
      "|    max|                18|\n",
      "+-------+------------------+\n",
      "\n"
     ]
    }
   ],
   "source": [
    "#part2.describe('open_acc_6m').show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+-----------+------+\n",
      "|open_acc_6m| count|\n",
      "+-----------+------+\n",
      "|          0|464188|\n",
      "|          1|308378|\n",
      "|       null|206280|\n",
      "|          2|141177|\n",
      "|          3| 55210|\n",
      "|          4| 20286|\n",
      "|          5|  7140|\n",
      "|          6|  2571|\n",
      "|          7|  1006|\n",
      "|          8|   418|\n",
      "|          9|   154|\n",
      "|         10|    72|\n",
      "|         11|    36|\n",
      "|         12|    18|\n",
      "|         13|     6|\n",
      "|         14|     5|\n",
      "|         16|     1|\n",
      "|         15|     1|\n",
      "|         18|     1|\n",
      "|         17|     1|\n",
      "+-----------+------+\n",
      "\n"
     ]
    }
   ],
   "source": [
    "#part2.groupBy(\"open_acc_6m\").count().orderBy(\"count\",ascending=False).show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [],
   "source": [
    "# # check the missing values\n",
    "# checkna_part2 = part2.select([count(when(isnan(c) | col(c).isNull(), c)).alias(c) for c in part2.columns])\n",
    "# checkna_part2.toPandas()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "root\n",
      " |-- pub_rec: integer (nullable = true)\n",
      " |-- revol_bal: float (nullable = true)\n",
      " |-- revol_util: float (nullable = false)\n",
      " |-- total_acc: integer (nullable = true)\n",
      " |-- initial_list_status: string (nullable = true)\n",
      " |-- out_prncp: float (nullable = true)\n",
      " |-- out_prncp_inv: float (nullable = true)\n",
      " |-- total_pymnt: float (nullable = true)\n",
      " |-- total_pymnt_inv: float (nullable = true)\n",
      " |-- total_rec_prncp: float (nullable = true)\n",
      " |-- total_rec_int: float (nullable = true)\n",
      " |-- total_rec_late_fee: float (nullable = true)\n",
      " |-- recoveries: float (nullable = true)\n",
      " |-- collection_recovery_fee: float (nullable = true)\n",
      " |-- last_pymnt_amnt: float (nullable = true)\n",
      " |-- collections_12_mths_ex_med: integer (nullable = true)\n",
      " |-- application_type: string (nullable = true)\n",
      " |-- acc_now_delinq: integer (nullable = true)\n",
      " |-- tot_coll_amt: float (nullable = true)\n",
      " |-- tot_cur_bal: float (nullable = true)\n",
      " |-- open_acc_6m: integer (nullable = true)\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# part2.printSchema()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we do not have any missing values in these columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>pub_rec</th>\n",
       "      <th>revol_bal</th>\n",
       "      <th>revol_util</th>\n",
       "      <th>total_acc</th>\n",
       "      <th>initial_list_status</th>\n",
       "      <th>out_prncp</th>\n",
       "      <th>out_prncp_inv</th>\n",
       "      <th>total_pymnt</th>\n",
       "      <th>total_pymnt_inv</th>\n",
       "      <th>total_rec_prncp</th>\n",
       "      <th>total_rec_int</th>\n",
       "      <th>total_rec_late_fee</th>\n",
       "      <th>recoveries</th>\n",
       "      <th>collection_recovery_fee</th>\n",
       "      <th>last_pymnt_amnt</th>\n",
       "      <th>collections_12_mths_ex_med</th>\n",
       "      <th>application_type</th>\n",
       "      <th>acc_now_delinq</th>\n",
       "      <th>tot_coll_amt</th>\n",
       "      <th>tot_cur_bal</th>\n",
       "      <th>open_acc_6m</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   pub_rec  revol_bal  revol_util  total_acc  initial_list_status  out_prncp  out_prncp_inv  total_pymnt  total_pymnt_inv  total_rec_prncp  total_rec_int  total_rec_late_fee  recoveries  collection_recovery_fee  last_pymnt_amnt  collections_12_mths_ex_med  application_type  acc_now_delinq  tot_coll_amt  tot_cur_bal  open_acc_6m\n",
       "0  0        0          0           0          0                    0          0              0            0                0                0              0                   0           0                        0                0                           0                 0               0             0            0          "
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "part2.select([count(when(isnan(c) | col(c).isNull(), c)).alias(c) for c in part2.columns]).toPandas()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "rows: 1206949\n",
      "columns: 21\n"
     ]
    }
   ],
   "source": [
    "size_shape(part2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>summary</td>\n",
       "      <td>count</td>\n",
       "      <td>mean</td>\n",
       "      <td>stddev</td>\n",
       "      <td>min</td>\n",
       "      <td>max</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>pub_rec</td>\n",
       "      <td>1206949</td>\n",
       "      <td>0.18891601882101067</td>\n",
       "      <td>0.5552736651970246</td>\n",
       "      <td>0</td>\n",
       "      <td>86</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>revol_bal</td>\n",
       "      <td>1206949</td>\n",
       "      <td>16808.217865046492</td>\n",
       "      <td>22685.94006979832</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2559552.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>revol_util</td>\n",
       "      <td>1206949</td>\n",
       "      <td>49.60215702165087</td>\n",
       "      <td>24.751729978833588</td>\n",
       "      <td>0.0</td>\n",
       "      <td>366.6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>total_acc</td>\n",
       "      <td>1206949</td>\n",
       "      <td>23.37079445776085</td>\n",
       "      <td>11.941722677905858</td>\n",
       "      <td>2</td>\n",
       "      <td>176</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>initial_list_status</td>\n",
       "      <td>1206949</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>f</td>\n",
       "      <td>w</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>out_prncp</td>\n",
       "      <td>1206949</td>\n",
       "      <td>8246.047815595506</td>\n",
       "      <td>8619.423099998028</td>\n",
       "      <td>0.0</td>\n",
       "      <td>40000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>out_prncp_inv</td>\n",
       "      <td>1206949</td>\n",
       "      <td>8244.196088209352</td>\n",
       "      <td>8618.689220779683</td>\n",
       "      <td>0.0</td>\n",
       "      <td>40000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>total_pymnt</td>\n",
       "      <td>1206949</td>\n",
       "      <td>7857.2732358664325</td>\n",
       "      <td>7372.212777604972</td>\n",
       "      <td>0.0</td>\n",
       "      <td>61947.53</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>total_pymnt_inv</td>\n",
       "      <td>1206949</td>\n",
       "      <td>7852.147555765605</td>\n",
       "      <td>7369.027624445597</td>\n",
       "      <td>0.0</td>\n",
       "      <td>61947.53</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>total_rec_prncp</td>\n",
       "      <td>1206949</td>\n",
       "      <td>5160.822785302468</td>\n",
       "      <td>5195.404453009808</td>\n",
       "      <td>0.0</td>\n",
       "      <td>40000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>total_rec_int</td>\n",
       "      <td>1206949</td>\n",
       "      <td>2440.0498857228645</td>\n",
       "      <td>2747.206620093818</td>\n",
       "      <td>0.0</td>\n",
       "      <td>27814.3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>total_rec_late_fee</td>\n",
       "      <td>1206949</td>\n",
       "      <td>1.9275032905808955</td>\n",
       "      <td>12.919605093795854</td>\n",
       "      <td>-9.5E-9</td>\n",
       "      <td>1427.25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>recoveries</td>\n",
       "      <td>1206949</td>\n",
       "      <td>254.47306136312878</td>\n",
       "      <td>976.7144306346049</td>\n",
       "      <td>0.0</td>\n",
       "      <td>39859.55</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>collection_recovery_fee</td>\n",
       "      <td>1206949</td>\n",
       "      <td>42.23292951247622</td>\n",
       "      <td>170.9743693190562</td>\n",
       "      <td>0.0</td>\n",
       "      <td>7174.719</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>last_pymnt_amnt</td>\n",
       "      <td>1206949</td>\n",
       "      <td>489.148443251319</td>\n",
       "      <td>699.2390074303721</td>\n",
       "      <td>0.0</td>\n",
       "      <td>40486.13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>collections_12_mths_ex_med</td>\n",
       "      <td>1206949</td>\n",
       "      <td>0.020176494615762555</td>\n",
       "      <td>0.1577334168220779</td>\n",
       "      <td>0</td>\n",
       "      <td>20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>application_type</td>\n",
       "      <td>1206949</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>Individual</td>\n",
       "      <td>Joint App</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>acc_now_delinq</td>\n",
       "      <td>1206949</td>\n",
       "      <td>0.0035063619092438867</td>\n",
       "      <td>0.06363324149822101</td>\n",
       "      <td>0</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>tot_coll_amt</td>\n",
       "      <td>1206949</td>\n",
       "      <td>216.8530439506285</td>\n",
       "      <td>1692.0028195280042</td>\n",
       "      <td>0.0</td>\n",
       "      <td>262740.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>tot_cur_bal</td>\n",
       "      <td>1206949</td>\n",
       "      <td>138929.0007531387</td>\n",
       "      <td>158656.0233532199</td>\n",
       "      <td>0.0</td>\n",
       "      <td>9971659.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>open_acc_6m</td>\n",
       "      <td>1206949</td>\n",
       "      <td>0.7472975245847173</td>\n",
       "      <td>1.0759859741062134</td>\n",
       "      <td>0</td>\n",
       "      <td>18</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                  0                      1                    2           3          4\n",
       "summary                     count    mean                   stddev               min         max      \n",
       "pub_rec                     1206949  0.18891601882101067    0.5552736651970246   0           86       \n",
       "revol_bal                   1206949  16808.217865046492     22685.94006979832    0.0         2559552.0\n",
       "revol_util                  1206949  49.60215702165087      24.751729978833588   0.0         366.6    \n",
       "total_acc                   1206949  23.37079445776085      11.941722677905858   2           176      \n",
       "initial_list_status         1206949  None                   None                 f           w        \n",
       "out_prncp                   1206949  8246.047815595506      8619.423099998028    0.0         40000.0  \n",
       "out_prncp_inv               1206949  8244.196088209352      8618.689220779683    0.0         40000.0  \n",
       "total_pymnt                 1206949  7857.2732358664325     7372.212777604972    0.0         61947.53 \n",
       "total_pymnt_inv             1206949  7852.147555765605      7369.027624445597    0.0         61947.53 \n",
       "total_rec_prncp             1206949  5160.822785302468      5195.404453009808    0.0         40000.0  \n",
       "total_rec_int               1206949  2440.0498857228645     2747.206620093818    0.0         27814.3  \n",
       "total_rec_late_fee          1206949  1.9275032905808955     12.919605093795854   -9.5E-9     1427.25  \n",
       "recoveries                  1206949  254.47306136312878     976.7144306346049    0.0         39859.55 \n",
       "collection_recovery_fee     1206949  42.23292951247622      170.9743693190562    0.0         7174.719 \n",
       "last_pymnt_amnt             1206949  489.148443251319       699.2390074303721    0.0         40486.13 \n",
       "collections_12_mths_ex_med  1206949  0.020176494615762555   0.1577334168220779   0           20       \n",
       "application_type            1206949  None                   None                 Individual  Joint App\n",
       "acc_now_delinq              1206949  0.0035063619092438867  0.06363324149822101  0           7        \n",
       "tot_coll_amt                1206949  216.8530439506285      1692.0028195280042   0.0         262740.0 \n",
       "tot_cur_bal                 1206949  138929.0007531387      158656.0233532199    0.0         9971659.0\n",
       "open_acc_6m                 1206949  0.7472975245847173     1.0759859741062134   0           18       "
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "part2.describe().toPandas().T"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now let's converts string to index (labels) using the StringIndexer "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'feature' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-3-e8cd0e98c6aa>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mcategorical_cols\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m'initial_list_status'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'application_type'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m stringIndexer = feature.StringIndexer(inputCols=[cols for cols in categorical_cols],\n\u001b[0m\u001b[1;32m      3\u001b[0m                                       outputCols=[\"encoded_\" + cols for cols in categorical_cols])\n",
      "\u001b[0;31mNameError\u001b[0m: name 'feature' is not defined"
     ]
    }
   ],
   "source": [
    "categorical_cols = ['initial_list_status','application_type']\n",
    "stringIndexer = feature.StringIndexer(inputCols=[cols for cols in categorical_cols],\n",
    "                                      outputCols=[\"encoded_\" + cols for cols in categorical_cols])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The below codes are to check if this object works"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [],
   "source": [
    "part2_SI=stringIndexer.fit(part2).transform(part2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+-------+---------------------------+\n",
      "|summary|encoded_initial_list_status|\n",
      "+-------+---------------------------+\n",
      "|  count|                    1206949|\n",
      "|   mean|        0.22930877775282965|\n",
      "| stddev|        0.42038840210265305|\n",
      "|    min|                        0.0|\n",
      "|    max|                        1.0|\n",
      "+-------+---------------------------+\n",
      "\n"
     ]
    }
   ],
   "source": [
    "part2_SI.describe('encoded_initial_list_status').show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+-------+------------------------+\n",
      "|summary|encoded_application_type|\n",
      "+-------+------------------------+\n",
      "|  count|                 1206949|\n",
      "|   mean|     0.08459760934389109|\n",
      "| stddev|      0.2782820835047306|\n",
      "|    min|                     0.0|\n",
      "|    max|                     1.0|\n",
      "+-------+------------------------+\n",
      "\n"
     ]
    }
   ],
   "source": [
    "part2_SI.describe('encoded_application_type').show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now let's scale the numeric variables"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [],
   "source": [
    "numeric_cols = [cols for cols in part2.columns if cols not in categorical_cols]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['pub_rec',\n",
       " 'revol_bal',\n",
       " 'revol_util',\n",
       " 'total_acc',\n",
       " 'out_prncp',\n",
       " 'out_prncp_inv',\n",
       " 'total_pymnt',\n",
       " 'total_pymnt_inv',\n",
       " 'total_rec_prncp',\n",
       " 'total_rec_int',\n",
       " 'total_rec_late_fee',\n",
       " 'recoveries',\n",
       " 'collection_recovery_fee',\n",
       " 'last_pymnt_amnt',\n",
       " 'collections_12_mths_ex_med',\n",
       " 'acc_now_delinq',\n",
       " 'tot_coll_amt',\n",
       " 'tot_cur_bal',\n",
       " 'open_acc_6m']"
      ]
     },
     "execution_count": 64,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "numeric_cols"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "19"
      ]
     },
     "execution_count": 65,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(numeric_cols)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "It turned out that StandardScaler can only take one column as input columns so we have to Assemble numeric columns to one column"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [],
   "source": [
    "# define the VectorAssembler object\n",
    "va = feature.VectorAssembler(inputCols=[cols for cols in numeric_cols], outputCol=\"features\")\n",
    "# define the StandardScaler object\n",
    "sScaler = feature.StandardScaler(withMean=True, withStd=True, inputCol=\"features\", outputCol=\"scaled_features\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [],
   "source": [
    "# standardScaler = feature.StandardScaler(withMean=True, withStd=True, inputCols=[cols for cols in numeric_cols],\n",
    "#                                       outputCols=[\"scaled_\" + cols for cols in numeric_cols])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Define the pipeline which contains 3 stages: stringindexer, VectorAssembler and StandardScaler"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [],
   "source": [
    "part2_pipe=Pipeline(stages=[stringIndexer, va, sScaler])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Fit the pipeline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [],
   "source": [
    "fitted_part2 = part2_pipe.fit(part2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Apply the pipeline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {},
   "outputs": [],
   "source": [
    "transformed_part2 = fitted_part2.transform(part2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>pub_rec</th>\n",
       "      <th>revol_bal</th>\n",
       "      <th>revol_util</th>\n",
       "      <th>total_acc</th>\n",
       "      <th>initial_list_status</th>\n",
       "      <th>out_prncp</th>\n",
       "      <th>out_prncp_inv</th>\n",
       "      <th>total_pymnt</th>\n",
       "      <th>total_pymnt_inv</th>\n",
       "      <th>total_rec_prncp</th>\n",
       "      <th>total_rec_int</th>\n",
       "      <th>total_rec_late_fee</th>\n",
       "      <th>recoveries</th>\n",
       "      <th>collection_recovery_fee</th>\n",
       "      <th>last_pymnt_amnt</th>\n",
       "      <th>collections_12_mths_ex_med</th>\n",
       "      <th>application_type</th>\n",
       "      <th>acc_now_delinq</th>\n",
       "      <th>tot_coll_amt</th>\n",
       "      <th>tot_cur_bal</th>\n",
       "      <th>open_acc_6m</th>\n",
       "      <th>encoded_initial_list_status</th>\n",
       "      <th>encoded_application_type</th>\n",
       "      <th>features</th>\n",
       "      <th>scaled_features</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>4341.0</td>\n",
       "      <td>10.300000</td>\n",
       "      <td>34</td>\n",
       "      <td>w</td>\n",
       "      <td>2386.020020</td>\n",
       "      <td>2386.020020</td>\n",
       "      <td>167.020004</td>\n",
       "      <td>167.020004</td>\n",
       "      <td>113.980003</td>\n",
       "      <td>53.040001</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>84.919998</td>\n",
       "      <td>0</td>\n",
       "      <td>Individual</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>16901.0</td>\n",
       "      <td>2</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>[1.0, 4341.0, 10.300000190734863, 34.0, 2386.02001953125, 2386.02001953125, 167.02000427246094, 167.02000427246094, 113.9800033569336, 53.040000915527344, 0.0, 0.0, 0.0, 84.91999816894531, 0.0, 0.0, 0.0, 16901.0, 2.0]</td>\n",
       "      <td>[1.4606923252720765, -0.5495570307727354, -1.5878549444634844, 0.8900897993473574, -0.6798631101036976, -0.6797061500435645, -1.043140433351989, -1.0428957446161513, -0.9714051769389715, -0.8688861869173164, -0.14919212132161083, -0.2605398808306633, -0.24701322005560447, -0.5780976758832024, -0.12791515597814898, -0.05510267631646443, -0.1281635239893517, -0.7691356317526241, 1.1642368075065885]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>12315.0</td>\n",
       "      <td>24.200001</td>\n",
       "      <td>44</td>\n",
       "      <td>w</td>\n",
       "      <td>29387.750000</td>\n",
       "      <td>29387.750000</td>\n",
       "      <td>1507.109985</td>\n",
       "      <td>1507.109985</td>\n",
       "      <td>612.250000</td>\n",
       "      <td>894.859985</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>777.229980</td>\n",
       "      <td>0</td>\n",
       "      <td>Individual</td>\n",
       "      <td>0</td>\n",
       "      <td>1208.0</td>\n",
       "      <td>321915.0</td>\n",
       "      <td>4</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>[1.0, 12315.0, 24.200000762939453, 44.0, 29387.75, 29387.75, 1507.1099853515625, 1507.1099853515625, 612.25, 894.8599853515625, 0.0, 0.0, 0.0, 777.22998046875, 0.0, 0.0, 1208.0, 321915.0, 4.0]</td>\n",
       "      <td>[1.4606923252720765, -0.19806178854489753, -1.026278012907947, 1.7274899190555162, 2.452797819428258, 2.4532215247781757, -0.8613646190198293, -0.8610413603777799, -0.8754992660229495, -0.5624585675752782, -0.14919212132161083, -0.2605398808306633, -0.24701322005560447, 0.4119929439807706, -0.12791515597814898, -0.05510267631646443, 0.585783276842209, 1.1533504709082207, 3.0229970963303687]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>4599.0</td>\n",
       "      <td>19.100000</td>\n",
       "      <td>13</td>\n",
       "      <td>w</td>\n",
       "      <td>4787.209961</td>\n",
       "      <td>4787.209961</td>\n",
       "      <td>353.890015</td>\n",
       "      <td>353.890015</td>\n",
       "      <td>212.789993</td>\n",
       "      <td>141.100006</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>180.690002</td>\n",
       "      <td>0</td>\n",
       "      <td>Individual</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>110299.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>(0.0, 4599.0, 19.100000381469727, 13.0, 4787.2099609375, 4787.2099609375, 353.8900146484375, 353.8900146484375, 212.7899932861328, 141.10000610351562, 0.0, 0.0, 0.0, 180.69000244140625, 0.0, 0.0, 0.0, 110299.0, 0.0)</td>\n",
       "      <td>[-0.3402214631482278, -0.5381843479918498, -1.232324232135087, -0.868450452039776, -0.4012841479679574, -0.40110346697930555, -1.0177925471727345, -1.0175369021881402, -0.9523864478250225, -0.8368318068266842, -0.14919212132161083, -0.2605398808306633, -0.24701322005560447, -0.44113448696671786, -0.12791515597814898, -0.05510267631646443, -0.1281635239893517, -0.18045328597073346, -0.6945234813171912]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>5468.0</td>\n",
       "      <td>78.099998</td>\n",
       "      <td>13</td>\n",
       "      <td>w</td>\n",
       "      <td>3831.929932</td>\n",
       "      <td>3831.929932</td>\n",
       "      <td>286.709991</td>\n",
       "      <td>286.709991</td>\n",
       "      <td>168.070007</td>\n",
       "      <td>118.639999</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>146.509995</td>\n",
       "      <td>0</td>\n",
       "      <td>Individual</td>\n",
       "      <td>0</td>\n",
       "      <td>686.0</td>\n",
       "      <td>305049.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>[0.0, 5468.0, 78.0999984741211, 13.0, 3831.929931640625, 3831.929931640625, 286.7099914550781, 286.7099914550781, 168.07000732421875, 118.63999938964844, 0.0, 0.0, 0.0, 146.50999450683594, 0.0, 0.0, 686.0, 305049.0, 1.0]</td>\n",
       "      <td>[-0.3402214631482278, -0.49987868389654116, 1.1513474604336786, -0.868450452039776, -0.5121129143731131, -0.5119416704260296, -1.0269051467707053, -1.0266534405724583, -0.9609940521735167, -0.8450073865408523, -0.14919212132161083, -0.2605398808306633, -0.24701322005560447, -0.49001621062824274, -0.12791515597814898, -0.05510267631646443, 0.277273152641816, 1.0470450206420763, 0.23485666309469871]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>829.0</td>\n",
       "      <td>3.600000</td>\n",
       "      <td>26</td>\n",
       "      <td>w</td>\n",
       "      <td>29339.019531</td>\n",
       "      <td>29339.019531</td>\n",
       "      <td>1423.209961</td>\n",
       "      <td>1423.209961</td>\n",
       "      <td>660.979980</td>\n",
       "      <td>762.229980</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>731.780029</td>\n",
       "      <td>0</td>\n",
       "      <td>Individual</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>116007.0</td>\n",
       "      <td>3</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>[0.0, 829.0, 3.5999999046325684, 26.0, 29339.01953125, 29339.01953125, 1423.2099609375, 1423.2099609375, 660.97998046875, 762.22998046875, 0.0, 0.0, 0.0, 731.780029296875, 0.0, 0.0, 0.0, 116007.0, 3.0]</td>\n",
       "      <td>[-0.3402214631482278, -0.704366573123396, -1.85854310613266, 0.22016970358083043, 2.4471442544292255, 2.447567478379506, -0.872745194560043, -0.8724268550033852, -0.8661198267686063, -0.610736699956265, -0.14919212132161083, -0.2605398808306633, -0.24701322005560447, 0.3469937796193618, -0.12791515597814898, -0.05510267631646443, -0.1281635239893517, -0.14447608271452847, 2.0936169519184786]</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   pub_rec  revol_bal  revol_util  total_acc initial_list_status     out_prncp  out_prncp_inv  total_pymnt  total_pymnt_inv  total_rec_prncp  total_rec_int  total_rec_late_fee  recoveries  collection_recovery_fee  last_pymnt_amnt  collections_12_mths_ex_med application_type  acc_now_delinq  tot_coll_amt  tot_cur_bal  open_acc_6m  encoded_initial_list_status  encoded_application_type                                                                                                                                                                                                                      features                                                                                                                                                                                                                                                                                                                                                                                                       scaled_features\n",
       "0  1        4341.0     10.300000   34         w                   2386.020020   2386.020020    167.020004   167.020004       113.980003       53.040001      0.0                 0.0         0.0                      84.919998        0                           Individual       0               0.0           16901.0      2            0.0                          0.0                       [1.0, 4341.0, 10.300000190734863, 34.0, 2386.02001953125, 2386.02001953125, 167.02000427246094, 167.02000427246094, 113.9800033569336, 53.040000915527344, 0.0, 0.0, 0.0, 84.91999816894531, 0.0, 0.0, 0.0, 16901.0, 2.0]     [1.4606923252720765, -0.5495570307727354, -1.5878549444634844, 0.8900897993473574, -0.6798631101036976, -0.6797061500435645, -1.043140433351989, -1.0428957446161513, -0.9714051769389715, -0.8688861869173164, -0.14919212132161083, -0.2605398808306633, -0.24701322005560447, -0.5780976758832024, -0.12791515597814898, -0.05510267631646443, -0.1281635239893517, -0.7691356317526241, 1.1642368075065885]     \n",
       "1  1        12315.0    24.200001   44         w                   29387.750000  29387.750000   1507.109985  1507.109985      612.250000       894.859985     0.0                 0.0         0.0                      777.229980       0                           Individual       0               1208.0        321915.0     4            0.0                          0.0                       [1.0, 12315.0, 24.200000762939453, 44.0, 29387.75, 29387.75, 1507.1099853515625, 1507.1099853515625, 612.25, 894.8599853515625, 0.0, 0.0, 0.0, 777.22998046875, 0.0, 0.0, 1208.0, 321915.0, 4.0]                              [1.4606923252720765, -0.19806178854489753, -1.026278012907947, 1.7274899190555162, 2.452797819428258, 2.4532215247781757, -0.8613646190198293, -0.8610413603777799, -0.8754992660229495, -0.5624585675752782, -0.14919212132161083, -0.2605398808306633, -0.24701322005560447, 0.4119929439807706, -0.12791515597814898, -0.05510267631646443, 0.585783276842209, 1.1533504709082207, 3.0229970963303687]           \n",
       "2  0        4599.0     19.100000   13         w                   4787.209961   4787.209961    353.890015   353.890015       212.789993       141.100006     0.0                 0.0         0.0                      180.690002       0                           Individual       0               0.0           110299.0     0            0.0                          0.0                       (0.0, 4599.0, 19.100000381469727, 13.0, 4787.2099609375, 4787.2099609375, 353.8900146484375, 353.8900146484375, 212.7899932861328, 141.10000610351562, 0.0, 0.0, 0.0, 180.69000244140625, 0.0, 0.0, 0.0, 110299.0, 0.0)       [-0.3402214631482278, -0.5381843479918498, -1.232324232135087, -0.868450452039776, -0.4012841479679574, -0.40110346697930555, -1.0177925471727345, -1.0175369021881402, -0.9523864478250225, -0.8368318068266842, -0.14919212132161083, -0.2605398808306633, -0.24701322005560447, -0.44113448696671786, -0.12791515597814898, -0.05510267631646443, -0.1281635239893517, -0.18045328597073346, -0.6945234813171912]\n",
       "3  0        5468.0     78.099998   13         w                   3831.929932   3831.929932    286.709991   286.709991       168.070007       118.639999     0.0                 0.0         0.0                      146.509995       0                           Individual       0               686.0         305049.0     1            0.0                          0.0                       [0.0, 5468.0, 78.0999984741211, 13.0, 3831.929931640625, 3831.929931640625, 286.7099914550781, 286.7099914550781, 168.07000732421875, 118.63999938964844, 0.0, 0.0, 0.0, 146.50999450683594, 0.0, 0.0, 686.0, 305049.0, 1.0]  [-0.3402214631482278, -0.49987868389654116, 1.1513474604336786, -0.868450452039776, -0.5121129143731131, -0.5119416704260296, -1.0269051467707053, -1.0266534405724583, -0.9609940521735167, -0.8450073865408523, -0.14919212132161083, -0.2605398808306633, -0.24701322005560447, -0.49001621062824274, -0.12791515597814898, -0.05510267631646443, 0.277273152641816, 1.0470450206420763, 0.23485666309469871]    \n",
       "4  0        829.0      3.600000    26         w                   29339.019531  29339.019531   1423.209961  1423.209961      660.979980       762.229980     0.0                 0.0         0.0                      731.780029       0                           Individual       0               0.0           116007.0     3            0.0                          0.0                       [0.0, 829.0, 3.5999999046325684, 26.0, 29339.01953125, 29339.01953125, 1423.2099609375, 1423.2099609375, 660.97998046875, 762.22998046875, 0.0, 0.0, 0.0, 731.780029296875, 0.0, 0.0, 0.0, 116007.0, 3.0]                     [-0.3402214631482278, -0.704366573123396, -1.85854310613266, 0.22016970358083043, 2.4471442544292255, 2.447567478379506, -0.872745194560043, -0.8724268550033852, -0.8661198267686063, -0.610736699956265, -0.14919212132161083, -0.2605398808306633, -0.24701322005560447, 0.3469937796193618, -0.12791515597814898, -0.05510267631646443, -0.1281635239893517, -0.14447608271452847, 2.0936169519184786]          "
      ]
     },
     "execution_count": 79,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "transformed_part2.limit(5).toPandas()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
